{"remainingRequest":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stoneage/vueJs projects/aliceblueTradevuex/src/views/holdings.vue?vue&type=template&id=4088cfac&","dependencies":[{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/src/views/holdings.vue","mtime":1655307156181},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655272561426},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/index.js","mtime":1655272561270}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}