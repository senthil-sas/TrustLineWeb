{"remainingRequest":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stoneage/vueJs projects/trustLineTradeVuex/src/views/settings.vue?vue&type=template&id=4a0130bd&","dependencies":[{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/src/views/settings.vue","mtime":1655730029369},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655272561426},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/vue-loader/lib/index.js","mtime":1655272561270}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPGRpdiBjbGFzcz0icHgtNCBweS0yIGFsaWduLWNlbnRlciBkLWZsZXgiPgogICAgPGRpdiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCBwcmltYXJ5Q29sb3IiPlNldHRpbmdzPC9kaXY+CiAgICA8di1wcm9ncmVzcy1jaXJjdWxhcgogICAgICAgICAgY2xhc3M9Im1sLTIiCiAgICAgICAgICBpbmRldGVybWluYXRlCiAgICAgICAgICBzaXplPSIxOCIKICAgICAgICAgIDp3aWR0aD0iMiIKICAgICAgICAgIGNvbG9yPSJibHVlIgogICAgICAgICAgdi1pZj0ic2V0dGluZ3NMb2FkZXIiCiAgICAgICAgPjwvdi1wcm9ncmVzcy1jaXJjdWxhcj4KICA8L2Rpdj4KIDx2LXJvdyBjbGFzcz0ibWItMiBteC0wIG10LTAgcHgtNCI+CiAgICA8di1zbGlkZS1ncm91cCB2LW1vZGVsPSJpbmZvVHlwZSIgY2xhc3M9InBhLTAiIG1hbmRhdG9yeSBoaWRlLWFycm93cz4KICAgICAgPHYtc2xpZGUtaXRlbSB2LWZvcj0iKGl0ZW0sIGkpIGluIEl0ZW1zIiA6a2V5PSJpIiB2LWJpbmQ6dmFsdWU9Iml0ZW0iIHYtc2xvdD0ieyBhY3RpdmUsIHRvZ2dsZSB9Ij4KICAgICAgICA8c3BhbiBAY2xpY2s9IiRyb3V0ZXIucHVzaCh7cGF0aDonc2V0dGluZ3MnLHF1ZXJ5OiB7IHRhYjogaW5mb1R5cGUudHJpbSgpLnRvU3RyaW5nKCkgfSB9KS5jYXRjaCgoKSA9PiB7fSkiPgogICAgICAgIDx2LWJ0biBkZXByZXNzZWQgOmNvbG9yPSJhY3RpdmUgPyAnYWN0aXZlQ29sb3Igd2hpdGUtLXRleHQnIDogJ3VuQWN0aXZlQ29sb3IgYmxhY2stLXRleHQnIiBoZWlnaHQ9IjI2IiBtaW4td2lkdGg9IjUwIiBjbGFzcz0iZnNpemUxMiBtci0yIHJvdW5kZWQtc20gdGV4dC1jZW50ZXIgdGV4dC1jYXBpdGFsaXplIiA6dmFsdWU9Iml0ZW0iIEBjbGljaz0idG9nZ2xlIj4KICAgICAgICAgIHt7IGl0ZW0gfX0KICAgICAgICA8L3YtYnRuPgogICAgICAgIDwvc3Bhbj4KICAgICAgPC92LXNsaWRlLWl0ZW0+CiAgICA8L3Ytc2xpZGUtZ3JvdXA+CiAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICA8L3Ytcm93PgoKICA8di1kaXZpZGVyIGNsYXNzPSJteC00IG1iLTIiPjwvdi1kaXZpZGVyPgoKICA8IS0tICBQZXJzb25hbCBQcm9maWxlIENvbnRlbnQgLS0+CgogIDxkaXYgY2xhc3M9InB4LTQiIHYtaWY9InRoaXMuaW5mb1R5cGUgPT0gJ0dlbmVyYWwnICYmICFzZXR0aW5nc0xvYWRlciI+CiAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgcHJpbWFyeUNvbG9yIGZvbnQtd2VpZ2h0LWJvbGQgcHQtMiBwYi0xIGwtaGVpZ2h0LTI4IgogICAgICA+UGVyc29uYWwgUHJvZmlsZTwvbGFiZWwKICAgID4KICAgIDx2LWNhcmQgY2xhc3M9InB4LTQgcHktNCI+CiAgICAgPGRpdiBjbGFzcz0icm93IG1hLTAgcGItNCI+CiAgICAgICAgPHYtZmxleCB4czEyIHNtNCBtZDMgbGcyIHhsMiBjbGFzcz0icGEtMCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICA8di1hdmF0YXIgY2xhc3M9ImF2YXRhciIgc2l6ZT0iOTAiPgogICAgICAgICAgICA8c3Bhbj57ewogICAgICAgICAgICAgIHVzZXJEZXRhaWxzWyJhY2NvdW50TmFtZSJdID09IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgPyAiTkEiCiAgICAgICAgICAgICAgICA6IHVzZXJEZXRhaWxzWyJzaG9ydE5hbWUiXQogICAgICAgICAgICB9fTwvc3Bhbj4KICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICA8ZGl2PjwvZGl2PgogICAgICAgIDwvdi1mbGV4PgoKICAgICAgICA8di1mbGV4IHhzMTIgc204IG1kNyBsZzEwIHhsMTAgY2xhc3M9InBhLTAgYWxpZ24tY2VudGVyIGQtZmxleCIgdi1pZj0iJHN0b3JlLnN0YXRlLndpbmRvd1dpZHRoID4gNTk5Ij4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZzaXplMTYgcHJpbWFyeUNvbG9yIj4KICAgICAgICAgICAgICB7eyB1c2VyRGV0YWlscy5hY2NvdW50TmFtZSB9fQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnNpemUxMiBzZWNvbmRDb2xvciI+e3sgdXNlckRldGFpbHMuYWNjb3VudElkIH19PC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZmxleD4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgPHYtZmxleCB4czEyIHNtMTIgbWQ2IGxnNiB4bDYgY2xhc3M9InBhLTAiPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1hLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNlY29uZENvbG9yIGZzaXplMTMiPlBBTjwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgcHJpbWFyeUNvbG9yIj57ewogICAgICAgICAgICAgICB1c2VyRGV0YWlsc1sicGFuTm8iXSA/IHVzZXJEZXRhaWxzWyJwYW5ObyJdIDogJ05BJwogICAgICAgICAgICAgIH19PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgcGEtMCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzZWNvbmRDb2xvciBmc2l6ZTEzIj5FLW1haWw8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTggcGEtMCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTEzIHByaW1hcnlDb2xvciIKICAgICAgICAgICAgICAgID57eyB1c2VyRGV0YWlscy5lbWFpbEFkZHIgPyB1c2VyRGV0YWlsc1siZW1haWxBZGRyIl06ICdOQScgfX0KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1hLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNlY29uZENvbG9yIGZzaXplMTMiPlBob25lPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBwcmltYXJ5Q29sb3IiPnt7CiAgICAgICAgICAgICAgdXNlckRldGFpbHNbImNlbGxBZGRyIl0gPyAgdXNlckRldGFpbHNbImNlbGxBZGRyIl06ICdOQSd9fTwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic2Vjb25kQ29sb3IgZnNpemUxMyI+RFAgSURzPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBwcmltYXJ5Q29sb3IiPgogICAgICAgICAgICAgICAge3sgdXNlckRldGFpbHMuZHBJZCA/IHVzZXJEZXRhaWxzWyJkcElkIl0gOiAnTkEnIH19CiAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgcGEtMCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzZWNvbmRDb2xvciBmc2l6ZTEzIj5EUCBCTyBJRDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgcHJpbWFyeUNvbG9yIj4KICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgIHVzZXJEZXRhaWxzLmRwQWNjb3VudE51bWJlciA/IHVzZXJEZXRhaWxzWyJkcEFjY291bnROdW1iZXIiXTogJ05BJwogICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvdi1mbGV4PgoKICAgICAgICA8di1mbGV4IHhzMCBzbTAgbWQ2IGxnNiB4bDYgY2xhc3M9InBhLTAiPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1hLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNlY29uZENvbG9yIGZzaXplMTMiPlNlZ21lbnRzPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBwcmltYXJ5Q29sb3IiPgogICAgICAgICAgICAgICAgPHNwYW4+e3sKICAgICAgICAgICAgICAgICAgZ2V0VXNlclNlc3Npb25EdG8uZXhjaCAhPSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICA/IGdldFVzZXJTZXNzaW9uRHRvLmV4Y2gKICAgICAgICAgICAgICAgICAgICAgICAgLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1siIltdXScsICIiKQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZUFsbCgiLCIsICIsICIpCiAgICAgICAgICAgICAgICAgICAgOiAiIgogICAgICAgICAgICAgICAgfX08L3NwYW4+PC9sYWJlbAogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgcGEtMCI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzZWNvbmRDb2xvciBmc2l6ZTEzIj5Qcm9kdWN0czwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgcHJpbWFyeUNvbG9yIj4KICAgICAgICAgICAgICAgIHt7IHVzZXJEZXRhaWxzLmNvbnZlcnRQcm9kdWN0cyB9fQogICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic2Vjb25kQ29sb3IgZnNpemUxMyI+T3JkZXIgVHlwZTwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgcHJpbWFyeUNvbG9yIj4KICAgICAgICAgICAgICAgIDxzcGFuPnt7CiAgICAgICAgICAgICAgICAgIGdldFVzZXJTZXNzaW9uRHRvLnByY3R5cCAhPSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICA/IGdldFVzZXJTZXNzaW9uRHRvLnByY3R5cAogICAgICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnWyIiW11dJywgIiIpCiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlQWxsKCIsIiwgIiwgIikKICAgICAgICAgICAgICAgICAgICA6ICIiCiAgICAgICAgICAgICAgICB9fTwvc3Bhbj48L2xhYmVsCiAgICAgICAgICAgICAgPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1hLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBwYS0wIj4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9InNlY29uZENvbG9yIGZzaXplMTMiPkJhbmsgQS9jIE5vPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBwcmltYXJ5Q29sb3IiPnt7CiAgICAgICAgICAgICAgICB1c2VyRGV0YWlscy5iYW5rQWNjb3VudE5vID8gdXNlckRldGFpbHMuYmFua0FjY291bnRObyA6ICdOQScKICAgICAgICAgICAgICB9fTwvbGFiZWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ic2Vjb25kQ29sb3IgZnNpemUxMyI+QmFuayBOYW1lPC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC04IHBhLTAiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBwcmltYXJ5Q29sb3IiPnt7CiAgICAgICAgICAgICAgICB1c2VyRGV0YWlscy5iYW5rTmFtZQogICAgICAgICAgICAgIH19PC9sYWJlbD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3YtZmxleD4KICAgICAgPC9kaXY+CiAgICA8L3YtY2FyZD4KCgogICAgPCEtLSBDdXN0b21lciBTdXBwb3J0IERldGFpbHMgLS0+CgogICAgPGN1c3RvbWVyU3VwcG9ydCAvPgogIDwvZGl2PgoKICA8IS0tIFNlY3VyaXR5IENvbnRlbnQgLS0+CgogPGRpdiBjbGFzcz0ibXgtNCBtYi00IHRhcmdldCIgdi1pZj0idGhpcy5pbmZvVHlwZSA9PSAnU2VjdXJpdHknICYmIHRoaXMuaXNTZWN1cml0eVRhYiI+CiAgICA8di1jYXJkIGNsYXNzPSJweC00IHB5LTQgbWItNCI+CiAgICAgIDxmb3JtIGFjdGlvbj4KICAgICAgICA8di1yb3cgY2xhc3M9Im1hLTAgIiA6Y2xhc3M9IiRzdG9yZS5zdGF0ZS53aW5kb3dXaWR0aCA+IDM3NCA/ICdkLWZsZXgnIDogJ2QtYmxvY2snIj4KICAgICAgICAgIDxkaXYgY2xhc3M9IiI+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItNCBoLTcyIiA6Y2xhc3M9IiRzdG9yZS5zdGF0ZS53aW5kb3dXaWR0aCA+IDM3NCA/ICcgdy0yOTYnIDogJ3ctMTAwJyI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTQgcHJpbWFyeUNvbG9yIHBsLTIiPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZzaXplMTIgIGxpbmtDb2xvciBmbG9hdC1yaWdodCBwci0yIGN1cnNvciIgQGNsaWNrPSJzaG93UmVzZXRQYXNzd29yZCgpIj5DaGFuZ2UgUGFzc3dvcmQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgcGxhY2Vob2xkZXI9IioqKioqKioqKioqKioqKiIgY2xhc3M9IgogICAgICAgICAgICAgICAgICAgIGgtNDAKICAgICAgICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgICAgICAgcHgtNCBweS0yCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWlucHV0CiAgICAgICAgICAgICAgICAgICAgZnNpemUxNAogICAgICAgICAgICAgICAgICAgIHByaW1hcnlDb2xvcgogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgIDpjbGFzcz0iJHN0b3JlLnN0YXRlLndpbmRvd1dpZHRoID4gMzc0ID8gJyB3LTI5NicgOiAndy0xMDAnIgogICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlIGRpc2FibGVkIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTQgIGgtNzIiIDpjbGFzcz0iJHN0b3JlLnN0YXRlLndpbmRvd1dpZHRoID4gMzc0ID8gJyB3LTI5NicgOiAndy0xMDAnIj4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxNCBwcmltYXJ5Q29sb3IgcGwtMiI+TS1QSU48L2xhYmVsPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZnNpemUxMiAgbGlua0NvbG9yIGZsb2F0LXJpZ2h0IHByLTIgY3Vyc29yIiBAY2xpY2s9InNob3dSZXNldE1waW5IaWRlU2hvdygpIj4KICAgICAgICAgICAgICAgICAgICBDaGFuZ2UgTS1QaW4KICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSIqKioqKioqKioqKioqKioiIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgICBoLTQwCiAgICAgICAgICAgICAgICAgICAgcm91bmRlZAogICAgICAgICAgICAgICAgICAgIHB4LTQgcHktMgogICAgICAgICAgICAgICAgICAgIGJvcmRlci1pbnB1dAogICAgICAgICAgICAgICAgICAgIGZzaXplMTQKICAgICAgICAgICAgICAgICAgICBwcmltYXJ5Q29sb3IKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA6Y2xhc3M9IiRzdG9yZS5zdGF0ZS53aW5kb3dXaWR0aCA+IDM3NCA/ICcgdy0yOTYnIDogJ3ctMTAwJyIKICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZSBkaXNhYmxlZCAvPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTQgaC03MiIgOmNsYXNzPSIkc3RvcmUuc3RhdGUud2luZG93V2lkdGggPiAzNzQgPyAnIHctMjk2JyA6ICd3LTEwMCciPgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTE0IHByaW1hcnlDb2xvciBwbC0yIj5TZWN1cml0eSBRdWVzdGlvbnM8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZnNpemUxMiBsaW5rQ29sb3IgZmxvYXQtcmlnaHQgcHItMiBjdXJzb3IiIEBjbGljaz0ic2hvd1Jlc2V0U3F1ZXNIaWRlU2hvdygpIj4KICAgICAgICAgICAgICAgICAgICBDaGFuZ2UgUXVlc3Rpb25zCiAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBwbGFjZWhvbGRlcj0iKioqKioqKioqKioqKioqIiBjbGFzcz0iCiAgICAgICAgICAgICAgICAgICAgaC00MAogICAgICAgICAgICAgICAgICAgIHJvdW5kZWQKICAgICAgICAgICAgICAgICAgICBweC00IHB5LTIKICAgICAgICAgICAgICAgICAgICBib3JkZXItaW5wdXQKICAgICAgICAgICAgICAgICAgICBmc2l6ZTE0CiAgICAgICAgICAgICAgICAgICAgcHJpbWFyeUNvbG9yCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgOmNsYXNzPSIkc3RvcmUuc3RhdGUud2luZG93V2lkdGggPiAzNzQgPyAnIHctMjk2JyA6ICd3LTEwMCciCiAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGUgZGlzYWJsZWQgLz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3Ytcm93PgogICAgICA8L2Zvcm0+CiAgICA8L3YtY2FyZD4KICA8L2Rpdj4KICA8IS0tIHBhc3N3b3JkIHJlc2V0ICAtLT4KCiAgPGRpdiBjbGFzcz0ibXQtNCBweC00IiB2LWlmPSJ0aGlzLmluZm9UeXBlID09ICdTZWN1cml0eScgJiYgdGhpcy5pc1Nob3dSZXNldFBhc3MiID4KICAgIDxsYWJlbCBjbGFzcz0icHJpbWFyeUNvbG9yIGZzaXplMTMgbC1oZWlnaHQtMjQgcHQtMyBwYi0yIGZvbnQtd2VpZ2h0LTYwMCI+UGFzc3dvcmQgQ2hhbmdlPC9sYWJlbD4KICAgIDx2LWNhcmQ+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIHBhLTYiPgogICAgICAgIDx2LWZsZXggeHMxMiBzbTEyIG1kNSBsZzUgeGw1IGNsYXNzPSJwYS0wIj4KICAgICAgICAgIDxmb3JtPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMSBoLTg2Ij4KICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTQgcHJpbWFyeUNvbG9yIHBhZGQtbC04IgoKICAgICAgICAgICAgICAgID5DdXJyZW50IFBhc3N3b3JkPC9sYWJlbAogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICAgIHBzd2JvcmRlcgogICAgICAgICAgICAgICAgICBkLWZsZXgKICAgICAgICAgICAgICAgICAganVzdGlmeS1zcGFjZS1iZXR3ZWVuCiAgICAgICAgICAgICAgICAgIHJvdW5kZWQKICAgICAgICAgICAgICAgICAgaC00MAogICAgICAgICAgICAgICAgICBhbGlnbi1jZW50ZXIKICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoLTI2MAogICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICA6dHlwZT0icGFzc3dvcmRGaWVsZFR5cGUzIgogICAgICAgICAgICAgICAgICB2LW1vZGVsPSJjdXJyZW50UGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmc2l6ZTE0IG91dGxpbmVib3JkZXIiCiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZQogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgIDxzcGFuIEBjbGljaz0idG9nZ2xlRmllbGRUZXh0VHlwZTMoKSI+IDxjdXN0b21JY29uIGNsYXNzPSJyb3VuZGVkIGgtNDAgSW5wdXRXaXRoSW1nIGN1cnNvciBwdC0yIHByLTIiICA6bmFtZT0iZmllbGRUZXh0VHlwZTMgPyAnZXllb3BlbicgOiAnZXllY2xvc2UnIiA6d2lkdGg9IicyNCciIDpoZWlnaHQ9IicyNCciIDpjb2xvcj0iJHN0b3JlLnN0YXRlLmljb25CbGFja0NvbG91ckNvZGUiIC8+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImVycm9yLS10ZXh0IGgtMTQgZnNpemUxMCBtdC0xIgogICAgICAgICAgICAgICAgdi1pZj0idGhpcy5jdXJyZW50UGFzc3dvcmRFcnJvciAhPSAnJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7eyBjdXJyZW50UGFzc3dvcmRFcnJvciB9fQogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0xIGgtODYiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxNCBwcmltYXJ5Q29sb3IgcGFkZC1sLTgiCgogICAgICAgICAgICAgICAgPk5ldyBQYXNzd29yZDwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICBwc3dib3JkZXIKICAgICAgICAgICAgICAgICAgZC1mbGV4CiAgICAgICAgICAgICAgICAgIGp1c3RpZnktc3BhY2UtYmV0d2VlbgogICAgICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgICAgIGgtNDAKICAgICAgICAgICAgICAgICAgYWxpZ24tY2VudGVyCiAgICAgICAgICAgICAgICAgIG1heC13aWR0aC0yNjAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgOnR5cGU9InBhc3N3b3JkRmllbGRUeXBlNCIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3UGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmc2l6ZTE0IG91dGxpbmVib3JkZXIiCiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZQogICAgICAgICAgICAgICAgLz4KCiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICA8c3BhbiBAY2xpY2s9InRvZ2dsZUZpZWxkVGV4dFR5cGU0KCkiPiA8Y3VzdG9tSWNvbiBjbGFzcz0icm91bmRlZCBoLTQwIElucHV0V2l0aEltZyBjdXJzb3IgcHQtMiBwci0yIiAgOm5hbWU9ImZpZWxkVGV4dFR5cGU0ID8gJ2V5ZW9wZW4nIDogJ2V5ZWNsb3NlJyIgOndpZHRoPSInMjQnIiA6aGVpZ2h0PSInMjQnIiA6Y29sb3I9IiRzdG9yZS5zdGF0ZS5pY29uQmxhY2tDb2xvdXJDb2RlIiAvPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJlcnJvci0tdGV4dCBoLTE0IGZzaXplMTAgbXQtMSIKICAgICAgICAgICAgICAgIHYtaWY9InRoaXMubmV3UGFzc3dvcmRFcnJvciAhPSAnJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7eyBuZXdQYXNzd29yZEVycm9yIH19CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTEgaC04NiI+CiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTE0IHByaW1hcnlDb2xvciBwYWRkLWwtOCIKCiAgICAgICAgICAgICAgICA+Q29uZmlybSBQYXNzd29yZDwvbGFiZWwKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9IgogICAgICAgICAgICAgICAgICBwc3dib3JkZXIKICAgICAgICAgICAgICAgICAgZC1mbGV4CiAgICAgICAgICAgICAgICAgIGp1c3RpZnktc3BhY2UtYmV0d2VlbgogICAgICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgICAgIGgtNDAKICAgICAgICAgICAgICAgICAgYWxpZ24tY2VudGVyCiAgICAgICAgICAgICAgICAgIG1heC13aWR0aC0yNjAKICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgOnR5cGU9InBhc3N3b3JkRmllbGRUeXBlNSIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0iY29uZmlybVBhc3N3b3JkIgogICAgICAgICAgICAgICAgICBjbGFzcz0iZnNpemUxNCBvdXRsaW5lYm9yZGVyIgogICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGUKICAgICAgICAgICAgICAgIC8+CgogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgPHNwYW4gQGNsaWNrPSJ0b2dnbGVGaWVsZFRleHRUeXBlNSgpIj4gPGN1c3RvbUljb24gY2xhc3M9InJvdW5kZWQgaC00MCBJbnB1dFdpdGhJbWcgY3Vyc29yIHB0LTIgcHItMiIgIDpuYW1lPSJmaWVsZFRleHRUeXBlNSA/ICdleWVvcGVuJyA6ICdleWVjbG9zZSciIDp3aWR0aD0iJzI0JyIgOmhlaWdodD0iJzI0JyIgOmNvbG9yPSIkc3RvcmUuc3RhdGUuaWNvbkJsYWNrQ29sb3VyQ29kZSIgLz48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iZXJyb3ItLXRleHQgaC0xNCBmc2l6ZTEwIG10LTEiCiAgICAgICAgICAgICAgICB2LWlmPSJ0aGlzLmNvbmZpcm1QYXNzd29yZEVycm9yICE9ICcnIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIHt7IGNvbmZpcm1QYXNzd29yZEVycm9yIH19CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWF4LXdpZHRoLTI2MCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxvYXQtcmlnaHQgcHgtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgOmNvbG9yPSIkc3RvcmUuc3RhdGUuYnV0dG9uVGhlbWVDb2xvciIKICAgICAgICAgICAgICAgICAgZGVwcmVzc2VkCiAgICAgICAgICAgICAgICAgIGNsYXNzPSIgIGZzaXplMTQgdGV4dC1jYXBpdGFsaXplIHdoaXRlLS10ZXh0IgogICAgICAgICAgICAgICAgICB3aWR0aD0iNjBweCIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJwYXNzd29yZENoYW5nZSgpIgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjMycHgiCiAgICAgICAgICAgICAgICAgID5SZXNldDwvdi1idG4KICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICBkZXByZXNzZWQKICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZiLWJ0biBibGFjay0tdGV4dCB0ZXh0LWNhcGl0YWxpemUgbWwtMiIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzZWN1cml0eVRhYigpIgogICAgICAgICAgICAgICAgICB3aWR0aD0iNjBweCIKICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIzMnB4IgogICAgICAgICAgICAgICAgICA+Q2FuY2VsPC92LWJ0bgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L3YtZmxleD4KICAgICAgICA8di1mbGV4IG1kMSBsZzEgeGwxPjwvdi1mbGV4PgogICAgICAgIDx2LWZsZXggeHMxMiBzbTEyIG1kNiBsZzYgeGw2IGNsYXNzPSJwYS0wIj4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBsLWhlaWdodC0yNCBmb250LXdlaWdodC1ib2xkIHByaW1hcnlDb2xvciI+UGFzc3dvcmQgUG9saWN5PC9sYWJlbD4KICAgICAgICAgIDxiciAvPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTEyIGwtaGVpZ2h0LTI0IHByaW1hcnlDb2xvciIKICAgICAgICAgICAgPlBhc3N3b3JkIHNob3VsZCBiZSBhbHBoYW51bWVyaWMgYW5kIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBhbmQKICAgICAgICAgICAgbWF4aW11bSAxMiBjaGFyYWN0ZXJzLiA8L2xhYmVsCiAgICAgICAgICA+PGJyIC8+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgbC1oZWlnaHQtMjQgZm9udC13ZWlnaHQtYm9sZFBhciBwcmltYXJ5Q29sb3IiCiAgICAgICAgICAgID5QYXNzd29yZCBzaG91bGQgbm90IGJlIHRoZSBzYW1lIGFzIHlvdXIgVXNlci9Mb2dpbiBJRC48L2xhYmVsCiAgICAgICAgICA+PGJyIC8+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgbC1oZWlnaHQtMjQgZm9udC13ZWlnaHQtYm9sZFBhciBwcmltYXJ5Q29sb3IiPgogICAgICAgICAgICBGb3IgZXh0cmEgc2FmZXR5LCBpdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdSB1c2UgYSBzcGVjaWFsCiAgICAgICAgICAgIGNoYXJhY3RlciBpbiB0aGUgcGFzc3dvcmQuIDwvbGFiZWwKICAgICAgICAgID48YnIgLz4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBsLWhlaWdodC0yNCBmb250LXdlaWdodC1ib2xkUGFyIHByaW1hcnlDb2xvciI+CiAgICAgICAgICAgIEZvciBzZWN1cml0eSBwdXJwb3NlcywgbG9naW4gcGFzc3dvcmQgd2lsbCBleHBpcmUgZXZlcnkgMTQgZGF5cwogICAgICAgICAgICBhbmQgd2lsbCBuZWVkIHRvIGJlIHJlc2V0IGJ5IHlvdS4KICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgPC92LWZsZXg+CiAgICAgIDwvZGl2PgogICAgPC92LWNhcmQ+CiAgPC9kaXY+CgogIDwhLS0gbXBpbiByZXNldCAtLT4KCiAgPGRpdiBjbGFzcz0icHgtNCIgdi1pZj0idGhpcy5pbmZvVHlwZSA9PSAnU2VjdXJpdHknICYmIHRoaXMuaXNTaG93UmVzZXRNcGluIj4KICAgIDxsYWJlbCBjbGFzcz0icHJpbWFyeUNvbG9yIGZzaXplMTMgbC1oZWlnaHQtMjQgcHQtMyBwYi0yIGZvbnQtd2VpZ2h0LTYwMCI+Q2hhbmdlIE0tUElOPC9sYWJlbD4KICAgIDx2LWNhcmQ+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIHBhLTYiPgogICAgICAgIDx2LWZsZXggeHMxMiBzbTEyIG1kNSBsZzUgeGw1IGNsYXNzPSJwYS0wIj4KICAgICAgICAgIDxmb3JtPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0xIGgtODYiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxNCBwcmltYXJ5Q29sb3IgcGFkZC1sLTgiPk5ldyBNLVBJTjwvbGFiZWw+CgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgcHN3Ym9yZGVyCiAgICAgICAgICAgICAgICAgIGQtZmxleAogICAgICAgICAgICAgICAgICBqdXN0aWZ5LXNwYWNlLWJldHdlZW4KICAgICAgICAgICAgICAgICAgcm91bmRlZAogICAgICAgICAgICAgICAgICBoLTQwCiAgICAgICAgICAgICAgICAgIGFsaWduLWNlbnRlcgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGgtMjYwCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgIDp0eXBlPSJwYXNzd29yZEZpZWxkVHlwZSIKICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3TXBpbiIKICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoPSI2IgogICAgICAgICAgICAgICAgICBAa2V5cHJlc3M9ImtleVByZXNzTnVtZXJpYygkZXZlbnQpIgogICAgICAgICAgICAgICAgICBjbGFzcz0iZnNpemUxNCBvdXRsaW5lYm9yZGVyIgogICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGUKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICA8c3BhbiBAY2xpY2s9InRvZ2dsZUZpZWxkVGV4dFR5cGUoKSI+IDxjdXN0b21JY29uIGNsYXNzPSJyb3VuZGVkIGgtNDAgSW5wdXRXaXRoSW1nIGN1cnNvciBwdC0yIHByLTIiICA6bmFtZT0iZmllbGRUZXh0VHlwZSA/ICdleWVvcGVuJyA6ICdleWVjbG9zZSciIDp3aWR0aD0iJzI0JyIgOmhlaWdodD0iJzI0JyIgOmNvbG9yPSIkc3RvcmUuc3RhdGUuaWNvbkJsYWNrQ29sb3VyQ29kZSIgLz48L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzcz0iZXJyb3ItLXRleHQgaC0xNCBmc2l6ZTEwIG10LTEiCiAgICAgICAgICAgICAgICB2LWlmPSJ0aGlzLm5ld01waW5FcnJvciAhPSAnJyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICB7eyB0aGlzLm5ld01waW5FcnJvciB9fQogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0xIGgtODYiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxNCBwcmltYXJ5Q29sb3IgbC1oZWlnaHQgcGFkZC1sLTgiCgogICAgICAgICAgICAgICAgPkNvbmZpcm0gTS1QSU48L2xhYmVsCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSIKICAgICAgICAgICAgICAgICAgcHN3Ym9yZGVyCiAgICAgICAgICAgICAgICAgIGQtZmxleAogICAgICAgICAgICAgICAgICBqdXN0aWZ5LXNwYWNlLWJldHdlZW4KICAgICAgICAgICAgICAgICAgcm91bmRlZAogICAgICAgICAgICAgICAgICBoLTQwCiAgICAgICAgICAgICAgICAgIGFsaWduLWNlbnRlcgogICAgICAgICAgICAgICAgICBtYXgtd2lkdGgtMjYwCiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgIDp0eXBlPSJwYXNzd29yZEZpZWxkVHlwZTEiCiAgICAgICAgICAgICAgICAgIHYtbW9kZWw9ImNvbmZpcm1NcGluIgogICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9IjYiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJ3LTIyNSBmc2l6ZTE0IG91dGxpbmVib3JkZXIiCiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZQogICAgICAgICAgICAgICAgICAgQGtleXByZXNzPSJrZXlQcmVzc051bWVyaWMoJGV2ZW50KSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgIDxzcGFuIEBjbGljaz0idG9nZ2xlRmllbGRUZXh0VHlwZTEoKSI+IDxjdXN0b21JY29uIGNsYXNzPSJyb3VuZGVkIGgtNDAgSW5wdXRXaXRoSW1nIGN1cnNvciBwdC0yIHByLTIiICA6bmFtZT0iZmllbGRUZXh0VHlwZTEgPyAnZXllb3BlbicgOiAnZXllY2xvc2UnIiA6d2lkdGg9IicyNCciIDpoZWlnaHQ9IicyNCciIDpjb2xvcj0iJHN0b3JlLnN0YXRlLmljb25CbGFja0NvbG91ckNvZGUiIC8+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9ImVycm9yLS10ZXh0IGgtMTQgZnNpemUxMCBtdC0xIgogICAgICAgICAgICAgICAgdi1pZj0idGhpcy5jb25maXJtTXBpbkVycm9yICE9ICcnIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIHt7IHRoaXMuY29uZmlybU1waW5FcnJvciB9fQogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1heC13aWR0aC0yNjAiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsb2F0LXJpZ2h0IHB4LTAiPgogICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgIDpjb2xvcj0iJHN0b3JlLnN0YXRlLmJ1dHRvblRoZW1lQ29sb3IiCiAgICAgICAgICAgICAgICAgIGRlcHJlc3NlZAogICAgICAgICAgICAgICAgICBjbGFzcz0iICBmc2l6ZTE0IHRleHQtY2FwaXRhbGl6ZSB3aGl0ZS0tdGV4dCIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMzJweCIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJyZXNldE5vd01waW4oKSIKICAgICAgICAgICAgICAgICAgPlJlc2V0PC92LWJ0bgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICBkZXByZXNzZWQKICAgICAgICAgICAgICAgICAgb3V0bGluZWQKICAgICAgICAgICAgICAgICAgY2xhc3M9ImZiLWJ0biBibGFjay0tdGV4dCB0ZXh0LWNhcGl0YWxpemUgbWwtMiIKICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzZWN1cml0eVRhYjEoKSIKICAgICAgICAgICAgICAgICAgd2lkdGg9IjYwcHgiCiAgICAgICAgICAgICAgICAgIGhlaWdodD0iMzJweCIKICAgICAgICAgICAgICAgICAgPkNhbmNlbDwvdi1idG4KICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC92LWZsZXg+CiAgICAgICAgPHYtZmxleCBtZDEgbGcxIHhsMT48L3YtZmxleD4KICAgICAgICA8di1mbGV4IHhzMTIgc20xMiBtZDYgbGc2IHhsNiBjbGFzcz0icC0wIj4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBsLWhlaWdodC0yNCBmb250LXdlaWdodC1ib2xkIj5NLVBJTiBQb2xpY3k8L2xhYmVsPgogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTMgbC1oZWlnaHQtMjQgZm9udC13ZWlnaHQtYm9sZFBhciBwcmltYXJ5Q29sb3IiCiAgICAgICAgICAgID5NLVBpbiBzaG91bGQgYmUgb25seSBudW1lcmljIGFuZCBpbiA2LWRpZ2l0cy48L2xhYmVsCiAgICAgICAgICA+CiAgICAgICAgICA8YnIgLz4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMyBsLWhlaWdodC0yNCBmb250LXdlaWdodC1ib2xkUGFyIHByaW1hcnlDb2xvciI+CiAgICAgICAgICAgIFlvdXIgTS1QaW4gaXMgYXMgaW1wb3J0YW50IGFzIFBhc3N3b3JkIGFuZCBkbyBub3Qga2VlcCBlYXN5IGFuZAogICAgICAgICAgICBndWVzc2FibGUgYW5kIHNlcXVlbmNlIG51bWJlcnMgbGlrZSAxMjM0NTYsIGV0Yy4sCiAgICAgICAgICA8L2xhYmVsPgogICAgICAgIDwvdi1mbGV4PgogICAgICA8L2Rpdj4KICAgIDwvdi1jYXJkPgogIDwvZGl2PgoKICA8IS0tIHNlY3VyaXR5IHF1ZXN0aW9uIHJlc2V0IC0tPgoKICA8ZGl2IGNsYXNzPSJweC00IiB2LWlmPSJ0aGlzLmluZm9UeXBlID09ICdTZWN1cml0eScgJiYgdGhpcy5pc1Nob3dSZXNldFNxdWVzIj4KICAgIDxsYWJlbCBjbGFzcz0icHJpbWFyeUNvbG9yIGZzaXplMTMgbC1oZWlnaHQtMjQgcHQtMyBwYi0yIGZvbnQtd2VpZ2h0LTYwMCI+U2VjdXJpdHkgUXVlc3Rpb25zIFJlc2V0PC9sYWJlbD4KICAgIDx2LWNhcmQ+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIHBhLTYiPgogICAgICAgIDx2LWZsZXggeHMxMiBzbTEyIG1kNSBsZzUgeGw1IGNsYXNzPSJwYS0wIj4KICAgICAgICAgIDxmb3JtPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWItMSBoLTg2Ij4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTE0IHByaW1hcnlDb2xvciBwbC0yIj5FbWFpbCBJRDwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICBjbGFzcz0iCiAgICAgICAgICAgICAgICBwc3dib3JkZXIKICAgICAgICAgICAgICAgIGQtZmxleAogICAgICAgICAgICAgICAganVzdGlmeS1zcGFjZS1iZXR3ZWVuCiAgICAgICAgICAgICAgICByb3VuZGVkCiAgICAgICAgICAgICAgICBoLTQwCiAgICAgICAgICAgICAgICBhbGlnbi1jZW50ZXIKICAgICAgICAgICAgICAgIG1heC13aWR0aC0yNjAKICAgICAgICAgICAgICAiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgIHYtbW9kZWw9ImVtYWlsSWQiCiAgICAgICAgICAgICAgICBjbGFzcz0iZnNpemUxNCBvdXRsaW5lYm9yZGVyIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci0tdGV4dCBoLTE0IGZzaXplMTAgbXQtMSIgdi1pZj0idGhpcy5lbWFpbEVycm9yICE9ICcnIj4KICAgICAgICAgICAgICB7eyBlbWFpbEVycm9yIH19CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXgtd2lkdGgtMjYwIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbG9hdC1yaWdodCBweC0wIj4KICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICA6Y29sb3I9IiRzdG9yZS5zdGF0ZS5idXR0b25UaGVtZUNvbG9yIgogICAgICAgICAgICAgICAgICBkZXByZXNzZWQKICAgICAgICAgICAgICAgICAgY2xhc3M9IiAgZnNpemUxNCB0ZXh0LWNhcGl0YWxpemUgd2hpdGUtLXRleHQiCiAgICAgICAgICAgICAgICAgIHdpZHRoPSI2MHB4IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjMycHgiCiAgICAgICAgICAgICAgICAgIEBjbGljaz0icmVzZXRTZWN1cml0eVF1ZXN0aW9ucygpIgogICAgICAgICAgICAgICAgICA+UmVzZXQ8L3YtYnRuCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgZGVwcmVzc2VkCiAgICAgICAgICAgICAgICAgIG91dGxpbmVkCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYi1idG4gYmxhY2stLXRleHQgdGV4dC1jYXBpdGFsaXplIG1sLTIiCiAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2VjdXJpdHlUYWIyKCkiCiAgICAgICAgICAgICAgICAgIHdpZHRoPSI2MHB4IgogICAgICAgICAgICAgICAgICBoZWlnaHQ9IjMycHgiCiAgICAgICAgICAgICAgICAgID5DYW5jZWw8L3YtYnRuCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvdi1mbGV4PgogICAgICA8L2Rpdj4KICAgICAgCiAgICA8L3YtY2FyZD4KICA8L2Rpdj4KCiAgPCEtLSBNYXJrZXQgY29udGVudHMgLS0+CgogIDxkaXYgY2xhc3M9InB4LTQgdGFyZ2V0IiB2LWlmPSJ0aGlzLmluZm9UeXBlID09ICdNYXJrZXRzJyAmJiAhc2V0dGluZ3NMb2FkZXIiPgogICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTEzIHByaW1hcnlDb2xvciBmb250LXdlaWdodC1ib2xkIGwtaGVpZ2h0LTI4IHB0LTIgcGItMSIKICAgICAgPk1hcmtldCBTdGF0dXM8L2xhYmVsCiAgICA+CiAgICA8di1jYXJkIGNsYXNzPSJweC00IHB5LTQiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIgcGEtMCAiPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTEyIHNlY29uZENvbG9yIGwtaGVpZ2h0LTMyLWgtMzIiPk5TRTwvbGFiZWw+CiAgICAgICAgICA8YnIgLz4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMiBzZWNvbmRDb2xvciBsLWhlaWdodC0zMi1oLTMyIj5CU0U8L2xhYmVsPgogICAgICAgICAgPGJyIC8+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTIgc2Vjb25kQ29sb3IgbC1oZWlnaHQtMzItaC0zMiI+TUNYPC9sYWJlbD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOSBwYS0wICI+CiAgICAgICAgICA8ZGl2PgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZzaXplMTIgcHJpbWFyeUNvbG9yIGwtaGVpZ2h0LTMyLWgtMzIiPnt7IG5zZVN0YXR1cyB9fTwvbGFiZWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZnNpemUxMiBwcmltYXJ5Q29sb3IgbC1oZWlnaHQtMzItaC0zMiI+e3sgYnNlU3RhdHVzIH19PC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTEyIHByaW1hcnlDb2xvciBsLWhlaWdodC0zMi1oLTMyIj57eyBtY3hTdGF0dXMgfX08L2xhYmVsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC92LWNhcmQ+CiAgICA8ZGl2IGNsYXNzPSJtdC00Ij4KICAgICAgPGxhYmVsCiAgICAgICAgY2xhc3M9ImZzaXplMTMgcHJpbWFyeUNvbG9yIGZvbnQtd2VpZ2h0LWJvbGQgcHQtMiBwYi0xIGwtaGVpZ2h0LTI4IgogICAgICAgID5NYXJrZXQgTWVzc2FnZXM8L2xhYmVsCiAgICAgID4KICAgICAgPHYtY2FyZCBjbGFzcz0ibWItNCI+CiAgICAgICAgPHYtdGFicyBjbGFzcz0icHJpbWFyeUNvbG9yIiB2LW1vZGVsPSJhY3RpdmVUYWIiIDpjb2xvcj0iJHN0b3JlLnN0YXRlLmJ1dHRvblRoZW1lQ29sb3IiPgogICAgICAgICAgPHYtdGFicy1zbGlkZXI+PC92LXRhYnMtc2xpZGVyPgogICAgICAgICAgPHYtdGFiIGhyZWY9IiNuc2UiIGNsYXNzPSJmc2l6ZTEyIHByaW1hcnlDb2xvciI+TlNFPC92LXRhYj4KICAgICAgICAgIDx2LXRhYiBocmVmPSIjYnNlIiBjbGFzcz0iZnNpemUxMiBwcmltYXJ5Q29sb3IiPkJTRTwvdi10YWI+CiAgICAgICAgICA8di10YWIgaHJlZj0iI21jeCIgY2xhc3M9ImZzaXplMTIgcHJpbWFyeUNvbG9yIj5NQ1g8L3YtdGFiPgogICAgICAgIDwvdi10YWJzPgogICAgICAgIDx2LXRhYnMtaXRlbXMgdi1tb2RlbD0iYWN0aXZlVGFiIj4KCiAgICAgICAgICA8di10YWItaXRlbSA6dHJhbnNpdGlvbj0iZmFsc2UiIGlkPSJuc2UiIGNsYXNzPSJweC00IHB5LTQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgICAgICAgPGRpdiB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBuc2VNZXNzYWdlcyIgOmtleT0iaW5kZXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnNpemUxMyBzZWNvbmRDb2xvciBsLWhlaWdodC0yNCI+e3sgaXRlbSB9fTwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciBwdC02IiB2LWlmPSJuc2VNZXNzYWdlcy5sZW5ndGggPT0gMCI+CiAgICAgICAgICAgIDxpbWcgd2lkdGg9IjE1JSIgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL25vRGF0YS5zdmciIGFsdD0ibm9EYXRhSW1nIiBjbGFzcz0ibWItMiIgLz4KICAgICAgICAgICAgICBObyBEYXRhIEZvdW5kCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC92LXRhYi1pdGVtPgoKICAgICAgICAgIDx2LXRhYi1pdGVtIDp0cmFuc2l0aW9uPSJmYWxzZSIgaWQ9ImJzZSIgY2xhc3M9InB4LTQgcHktNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYS0wIj4KICAgICAgICAgICAgICA8ZGl2IHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIGJzZU1lc3NhZ2VzIiA6a2V5PSJpbmRleCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmc2l6ZTEzIHNlY29uZENvbG9yIGwtaGVpZ2h0LTI0Ij57eyBpdGVtIH19PC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtY29sdW1uIGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciBwdC02IiB2LWlmPSJic2VNZXNzYWdlcy5sZW5ndGggPT0gMCI+CiAgICAgICAgICAgIDxpbWcgd2lkdGg9IjE1JSIgc3JjPSIuLi9hc3NldHMvaW1hZ2VzL25vRGF0YS5zdmciIGFsdD0ibm9EYXRhSW1nIiBjbGFzcz0ibWItMiIgLz4KICAgICAgICAgICAgICBObyBEYXRhIEZvdW5kCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDwvdi10YWItaXRlbT4KCiAgICAgICAgICA8di10YWItaXRlbSA6dHJhbnNpdGlvbj0iZmFsc2UiIGlkPSJtY3giIGNsYXNzPSJweC00IHB5LTQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWEtMCI+CiAgICAgICAgICAgICAgPGRpdiB2LWZvcj0iKGl0ZW0sIGluZGV4KSBpbiBtY3hNZXNzYWdlcyIgOmtleT0iaW5kZXgiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZnNpemUxMyBzZWNvbmRDb2xvciBsLWhlaWdodC0yNCI+e3sgaXRlbSB9fTwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiBqdXN0aWZ5LWNlbnRlciBhbGlnbi1jZW50ZXIgcHQtNiIgdi1pZj0ibWN4TWVzc2FnZXMubGVuZ3RoID09IDAiPgogICAgICAgICAgICA8aW1nIHdpZHRoPSIxNSUiIHNyYz0iLi4vYXNzZXRzL2ltYWdlcy9ub0RhdGEuc3ZnIiBhbHQ9Im5vRGF0YUltZyIgY2xhc3M9Im1iLTIiIC8+CiAgICAgICAgICAgICAgTm8gRGF0YSBGb3VuZAogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8L3YtdGFiLWl0ZW0+CgogICAgICAgIDwvdi10YWJzLWl0ZW1zPgogICAgICA8L3YtY2FyZD4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8IS0tIEJ1aWxkIEluZm8gY29udGVudHMgLS0+IAogICAgPGRpdiBjbGFzcz0icHgtNCBwYi00IHRhcmdldCIgdi1pZj0idGhpcy5pbmZvVHlwZSA9PSAnQnVpbGQgSW5mbyciPgogICAgPGxhYmVsIGNsYXNzPSJmc2l6ZTEzIHByaW1hcnlDb2xvciBmb250LXdlaWdodC1ib2xkIGwtaGVpZ2h0LTI0IHB0LTIgcGItMSI+QnVpbGQgSW5mbzwvbGFiZWw+CiAgICA8di1jYXJkIGNsYXNzPSJwYS00Ij4KICAgICAgPGRpdiBjbGFzcz0icm93IG1hLTAiPgogICAgICAgIDx2LWZsZXggeHM2IHNtNiBtZDYgbGc2IHhsNiBjbGFzcz0icC0wIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InNlY29uZENvbG9yIHBiLTIgZnNpemUxMyI+RGF0ZSAgPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiAzM3B4ICFpbXBvcnRhbnQ7Ij4mbmJzcDsmbmJzcDsgOiA8L3NwYW4+Jm5ic3A7Jm5ic3A7IHt7YnVpbGREYXRlfX0gPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJzZWNvbmRDb2xvciBwYi0yIGZzaXplMTMiPlZlcnNpb24gPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiAxN3B4ICFpbXBvcnRhbnQ7Ij4mbmJzcDsmbmJzcDsgOiA8L3NwYW4+Jm5ic3A7Jm5ic3A7IHt7YnVpbGRWZXJzaW9ufX08L2Rpdj4KICAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0ic2Vjb25kQ29sb3IgcGItMiBmc2l6ZTEzIj5HaXQgIDxzcGFuIHN0eWxlPSJtYXJnaW4tbGVmdDogNDVweCAhaW1wb3J0YW50OyI+Jm5ic3A7Jm5ic3A7IDogPC9zcGFuPiZuYnNwOyZuYnNwOyB7e2dpdEJyYW5jaE5hbWV9fTwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0ic2Vjb25kQ29sb3IgcGItMiBmc2l6ZTEzIj5Db21taXQgSWQgPHNwYW4gY2xhc3M9IiI+Jm5ic3A7Jm5ic3A7IDogPC9zcGFuPiZuYnNwOyZuYnNwOyAge3tnaXRDb21taXRJZH19IDwvZGl2PiAtLT4KICAgICAgICA8L3YtZmxleD4KICAgICAgPC9kaXY+CiAgICA8L3YtY2FyZD4KICA8L2Rpdj4KPC9kaXY+Cg=="},null]}