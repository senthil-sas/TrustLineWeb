{"remainingRequest":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stoneage/vueJs projects/aliceblueTradevuex/src/components/orderWindow.vue?vue&type=template&id=208603fe&","dependencies":[{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/src/components/orderWindow.vue","mtime":1655307156177},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655272561426},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/index.js","mtime":1655272561270}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}