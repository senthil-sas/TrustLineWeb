{"remainingRequest":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/babel-loader/lib/index.js!/home/stoneage/vueJs projects/trustLineTradeVuex/src/store/modules/marketWatch.js","dependencies":[{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/src/store/modules/marketWatch.js","mtime":1655307156181},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/babel.config.js","mtime":1649344700943},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/babel-loader/lib/index.js","mtime":1655272566942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3N0b25lYWdlL3Z1ZUpzIHByb2plY3RzL3RydXN0TGluZVRyYWRlVnVleC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvaG9tZS9zdG9uZWFnZS92dWVKcyBwcm9qZWN0cy90cnVzdExpbmVUcmFkZVZ1ZXgvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZi5qcyI7CmltcG9ydCBzZXJ2aWNlIGZyb20gIi4uL1NlcnZpY2VzL2h0dHBzZXJ2aWNlIjsKaW1wb3J0IGVycm9ySGFuZGxpbmcgZnJvbSAnLi4vU2VydmljZXMvZXJyb3JIYW5kbGluZyc7CmltcG9ydCByb3V0ZXIgZnJvbSAnLi4vLi4vcm91dGVyJzsKdmFyIG1rV2F0Y2ggPSB7CiAgbmFtZXNwYWNlZDogdHJ1ZSwKICBzdGF0ZTogewogICAgbXdHcm91cE5hbWVzOiBbXSwKICAgIG13TGlzdDogW10sCiAgICBub2RhdGE6IGZhbHNlLAogICAgc2VhcmNoTGlzdDogW10sCiAgICBzZWN1cml0eUluZm9EYXRhOiBbXSwKICAgIHByaWNlUmFnZURhdGE6IFtdLAogICAgYWxlcnREaWFsb2c6IGZhbHNlLAogICAgbG9hZGluZzogZmFsc2UsCiAgICBhbGVydExvYWRlcjogZmFsc2UsCiAgICBkZXB0aExvYWRlcjogZmFsc2UsCiAgICBhdXRoRGlhbG9nOiBmYWxzZQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzZXRNd0dyb3VwTmFtZXM6IGZ1bmN0aW9uIHNldE13R3JvdXBOYW1lcyhzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5td0dyb3VwTmFtZXMgPSBkYXRhOwogICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbXdMaXN0JywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgfSwKICAgIHNldE13bGlzdDogZnVuY3Rpb24gc2V0TXdsaXN0KHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLm13TGlzdCA9IFtdOwogICAgICBzdGF0ZS5td0xpc3QgPSBkYXRhOwogICAgICBzdGF0ZS5td0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsKICAgICAgICBlbC5DaGFuZ2UgPSAnMC4wMCc7CiAgICAgICAgZWwuUGVyQ2hhbmdlID0gJzAuMDAnOwogICAgICAgIGVsLmNoYXJ0ID0gJ213JzsKICAgICAgICBlbC5JbnN0TmFtZSA9IGVsLmluc1R5cGU7CiAgICAgICAgZWwuY2hhcnRFeGNoYW5nZSA9IGVsLmV4OwogICAgICAgIGVsLmNoYXJ0VG9rZW4gPSBlbC50b2tlbjsKCiAgICAgICAgaWYgKGVsLmx0cCA+IDAgJiYgZWwucGRjKSB7CiAgICAgICAgICBlbC5DaGFuZ2UgPSBwYXJzZUZsb2F0KGVsLnBkYykgLSBwYXJzZUZsb2F0KGVsLmx0cCk7CiAgICAgICAgICBlbC5QZXJDaGFuZ2UgPSBlbC5DaGFuZ2UgLyAxMDA7CiAgICAgICAgfQoKICAgICAgICBlbC5QZXJDaGFuZ2UgPSBwYXJzZUZsb2F0KGVsLlBlckNoYW5nZSkudG9GaXhlZCgyKTsKCiAgICAgICAgaWYgKGVsLmluc1R5cGUudG9Mb3dlckNhc2UoKSA9PSAnaW5kZXgnKSB7CiAgICAgICAgICBlbC5jaGFydFN5bWJvbCA9IGVsLnN5bWJvbCArICc6OicgKyBlbC5leC50b0xvY2FsZVVwcGVyQ2FzZSgpICsgJzo6SU5ERVgnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgYXJyID0gZWwuc2NyaXBOYW1lLnNwbGl0KCcgJyk7CiAgICAgICAgICB2YXIgdGVtcFNjcmlwID0gJyc7CiAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgICAgdGVtcFNjcmlwICs9IGVsOwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgdGVtcFN5bWJvbCA9IGVsLmV4ID09ICJNQ1giIHx8IGVsLmV4ID09ICJCU0UiIHx8IGVsLmV4ID09ICJDRFMiIHx8IGVsLmV4ID09ICJCQ0QiID8gZWwuc3ltYm9sIDogZWwuZXggPT0gIk5TRSIgPyBlbC5zeW1ib2wuc3BsaXQoJy0nKVswXSA6IHRlbXBTY3JpcDsKICAgICAgICAgIGVsLmNoYXJ0U3ltYm9sID0gdGVtcFN5bWJvbCArICc6OicgKyBlbC5leC50b0xvY2FsZVVwcGVyQ2FzZSgpICsgJzo6OicgKyBlbC5leCArICc6OjonICsgZWwudG9rZW47CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGhpcy5kaXNwYXRjaCgnbWFya2V0V2F0Y2gvY2hlY2tTb2NrZXRTdGF0dXMnKTsKICAgIH0sCiAgICBzZXROb2RhdGE6IGZ1bmN0aW9uIHNldE5vZGF0YShzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5ub2RhdGEgPSBkYXRhOwogICAgfSwKICAgIHNldFNlYXJjaExpc3Q6IGZ1bmN0aW9uIHNldFNlYXJjaExpc3Qoc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUuc2VhcmNoTGlzdCA9IGRhdGE7CiAgICB9LAogICAgc2V0U2VjdXJpdHlJbmZvOiBmdW5jdGlvbiBzZXRTZWN1cml0eUluZm8oc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUuc2VjdXJpdHlJbmZvRGF0YSA9IGRhdGE7CiAgICB9LAogICAgc2V0UHJpY2VSYW5nZTogZnVuY3Rpb24gc2V0UHJpY2VSYW5nZShzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5wcmljZVJhZ2VEYXRhID0gW107CiAgICAgIHN0YXRlLnByaWNlUmFnZURhdGEgPSBkYXRhOwogICAgfSwKICAgIHNldEFsZXJ0RGlhbG9nOiBmdW5jdGlvbiBzZXRBbGVydERpYWxvZyhzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5hbGVydERpYWxvZyA9IGRhdGE7CiAgICB9LAogICAgc2V0RGVwdGhMb2FkZXI6IGZ1bmN0aW9uIHNldERlcHRoTG9hZGVyKHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLmRlcHRoTG9hZGVyID0gZGF0YTsKICAgIH0sCiAgICBzZXRBdXRoRGlhbG9nOiBmdW5jdGlvbiBzZXRBdXRoRGlhbG9nKHN0YXRlLCBwYXlsb2FkKSB7CiAgICAgIHN0YXRlLmF1dGhEaWFsb2cgPSBwYXlsb2FkOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgLy8gZ2V0IG1hcmtldHdhdGNoIG5hbWVzCiAgICBnZXRNd2xpc3ROYW1lczogZnVuY3Rpb24gZ2V0TXdsaXN0TmFtZXMoX3JlZikgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjb21taXQsIHN0YXRlLCByb290R2V0dGVycywgZGlzcGF0Y2gsIGpzb247CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsIHN0YXRlID0gX3JlZi5zdGF0ZSwgcm9vdEdldHRlcnMgPSBfcmVmLnJvb3RHZXR0ZXJzLCBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGpzb24gPSB7CiAgICAgICAgICAgICAgICAgIHVzZXJJZDogcm9vdEdldHRlcnNbJ2F1dGh0aWNhdGlvbi9nZXRVc2VySWQnXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZmV0Y2hNV0xpc3QoanNvbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIHJvdXRlci5jdXJyZW50Um91dGUucGF0aCA9PSAnLycgPyBlcnJvckhhbmRsaW5nLmxvY2FsQ2xlYXIoKSA6IGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YS5zdGF0ID09ICJPayIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocm9vdEdldHRlcnNbJ2dldFNzb1R5cGUnXSA9PSAnJykgewogICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ25ld01hcmtldFdhdGNoJywgewogICAgICAgICAgICAgICAgICAgICAgICAidXNlcklkIjogcm9vdEdldHRlcnNbJ2F1dGh0aWNhdGlvbi9nZXRVc2VySWQnXQogICAgICAgICAgICAgICAgICAgICAgfSk7IC8vIGlmIChyZXNwb25zZS5kYXRhLnZhbHVlcy5sZW5ndGggPT0gNSkgewogICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbW1pdCgic2V0TXdHcm91cE5hbWVzIiwgcmVzcG9uc2UuZGF0YS52YWx1ZXMpOwogICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJvdXRlci5jdXJyZW50Um91dGUucGF0aCA9PSAnLycgPyByb3V0ZXIucHVzaCgnL2hvbWUnKS5jYXRjaCgoKT0+IHt9KSA6ICcnCiAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGRpc3BhdGNoKCJhdXRvR2VuZXJhdGVNVyIsIHJlc3BvbnNlLmRhdGEudmFsdWVzKTsKICAgICAgICAgICAgICAgICAgICAgIC8vIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ2F1dGh0aWNhdGlvbi9nZW5lcmF0ZUF1dGhDb2RlJywgewogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICJvcmRlcnMiCiAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICByb3V0ZXIuY3VycmVudFJvdXRlLnBhdGggPT0gJy8nID8gZXJyb3JIYW5kbGluZy5sb2NhbENsZWFyKCkgOiBlcnJvckhhbmRsaW5nLmVyckxvZyhlcnIpOwogICAgICAgICAgICAgICAgfSlbImZpbmFsbHkiXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8gZmV0Y2ggY3VycmVudCBtYXJrZXR3YXRjaCBsaXN0CiAgICBmZXRjaE13TGlzdHM6IGZ1bmN0aW9uIGZldGNoTXdMaXN0cyhfcmVmMiwgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgY29tbWl0LCBzdGF0ZSwgZGlzcGF0Y2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdCwgc3RhdGUgPSBfcmVmMi5zdGF0ZSwgZGlzcGF0Y2ggPSBfcmVmMi5kaXNwYXRjaDsKICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZmV0Y2hNV1NjcmlwTGlzdChwYXlsb2FkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lbXNnID09ICJTZXNzaW9uIEV4cGlyZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5zZXNzaW9uRXhwaXJlKCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCAmJiByZXNwb25zZS5kYXRhLnN0YXQgPT0gIk9rIiAmJiByZXNwb25zZS5kYXRhLnZhbHVlc1swXSAhPT0gIk5vIE1hcmtldCBXYXRjaCIpIHsKICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldE5vZGF0YScsIGZhbHNlKTsgLy8gY2hlY2sgdW53YW50ZWQgc2NyaXBzIAoKICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayB1bndhbnRlZCBzY3JpcHMgCiAgICAgICAgICAgICAgICAgICAgdmFyIG13RGF0YSA9IFtdOwogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEudmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgICAgICAgICAgICAgICBlbC52b2x1bWUgPSAnJywgZWwuY2hhcnQgPSAnbXcnOwoKICAgICAgICAgICAgICAgICAgICAgIGlmIChlbC5FeGNoYW5nZSAhPSAnWCcgJiYgZWwudG9rZW4gIT0gJzEwMCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbXdEYXRhLnB1c2goZWwpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAobXdEYXRhLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldE5vZGF0YScsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRNd2xpc3QnLCBbXSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcERhdGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBtd0RhdGEsCiAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogJ21rV2F0Y2gnCiAgICAgICAgICAgICAgICAgICAgfTsgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ2NvbW1vbi9mb3JtYXRTY3JpcCcsIHRlbXBEYXRhLCB7CiAgICAgICAgICAgICAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5lbXNnID09ICdOb3QgYWJsZSB0byBSZXRyaWV2ZSBNYXJrZXRXYXRjaCAnIHx8IHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAnTm90IGFibGUgdG8gUmV0cmlldmUgTWFya2V0V2F0Y2gnIHx8IHJlc3BvbnNlLmRhdGEudmFsdWVzWzBdID09ICJObyBNYXJrZXQgV2F0Y2giKSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXROb2RhdGEnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldE13bGlzdCcsIFtdKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldE5vZGF0YScsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0TXdsaXN0JywgW10pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuZXJyTG9nKGVycik7CiAgICAgICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIGF1dG9nZW5lcmF0ZSBtYXJrZXR3YXRjaCBuYW1lcwogICAgYXV0b0dlbmVyYXRlTVc6IGZ1bmN0aW9uIGF1dG9HZW5lcmF0ZU1XKF9yZWYzLCBwYXlsb2FkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBjb21taXQsIG13TmFtZSwgdGVtcE13TmFtZSwgcmFuZG9tTnVtYmVyLCBhbHBoYSwgdGVtcDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogICAgICAgICAgICAgICAgbXdOYW1lID0gIm13R3JwIjsKICAgICAgICAgICAgICAgIHRlbXBNd05hbWUgPSBwYXlsb2FkOwoKICAgICAgICAgICAgICAgIHdoaWxlIChwYXlsb2FkLmxlbmd0aCAhPSA1ICYmIHBheWxvYWQubGVuZ3RoIDw9IDUpIHsKICAgICAgICAgICAgICAgICAgcmFuZG9tTnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjUpOwogICAgICAgICAgICAgICAgICBhbHBoYSA9IFsiYSIsICJiIiwgImMiLCAiZCIsICJlIiwgImYiLCAiZyIsICJoIiwgImkiLCAiaiIsICJrIiwgImwiLCAibSIsICJuIiwgIm8iLCAicCIsICJxIiwgInIiLCAicyIsICJ0IiwgInUiLCAidiIsICJ3IiwgIngiLCAieSIsICJ6Il07CiAgICAgICAgICAgICAgICAgIHRlbXAgPSBtd05hbWUgKyBhbHBoYVtyYW5kb21OdW1iZXJdOwogICAgICAgICAgICAgICAgICBtd05hbWUgKz0gYWxwaGFbcmFuZG9tTnVtYmVyXTsKICAgICAgICAgICAgICAgICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT0gdGVtcCkgewogICAgICAgICAgICAgICAgICAgICAgbXdOYW1lID0gdGVtcDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB0ZW1wTXdOYW1lLnB1c2gobXdOYW1lKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBjb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gdGVtcE13TmFtZTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQxID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICAoMCwgX2NvbnRleHQzLnQwKSgic2V0TXdHcm91cE5hbWVzIiwgX2NvbnRleHQzLnQxKTsKICAgICAgICAgICAgICAgIHJvdXRlci5jdXJyZW50Um91dGUucGF0aCA9PSAnLycgPyByb3V0ZXIucHVzaCgnL2hvbWUnKVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7fSkgOiAnJzsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIHNlYXJjaCBzY3JpcCBsaXN0CiAgICBnZXRTZWFyY2hTY3JpcHRzOiBmdW5jdGlvbiBnZXRTZWFyY2hTY3JpcHRzKF9yZWY0LCBwYXlsb2FkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBzdGF0ZSwgY29tbWl0LCBqc29uOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWY0LnN0YXRlLCBjb21taXQgPSBfcmVmNC5jb21taXQ7CiAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGpzb24gPSB7CiAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlOiBbIkFsbCIsICJDRFMiLCAiTUNYIiwgIk5GTyIsICJOU0UiLCAiQlNFIl0sCiAgICAgICAgICAgICAgICAgIHN5bWJvbDogcGF5bG9hZCA/IHBheWxvYWQudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpIDogJycKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5nZXRTZWFyY2hTY3JpcChqc29uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoc2VhcmNoRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGUubXdMaXN0LmZvckVhY2goZnVuY3Rpb24gKG13TGlzdERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG13TGlzdERhdGFbInRva2VuIl0gPT0gc2VhcmNoRGF0YVsidG9rZW4iXSAmJiBtd0xpc3REYXRhWyJFeGNoYW5nZSJdICE9ICJYIikgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWFyY2hEYXRhWyJjaGVja2VkIl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBjb21taXQoInNldFNlYXJjaExpc3QiLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN0YXQgPT0gIk5vdF9PayIgJiYgcmVzcG9uc2UuZGF0YS5lbXNnID09ICJTZXNzaW9uIEV4cGlyZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5zZXNzaW9uRXhwaXJlKCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5lcnJMb2coZXJyKTsKICAgICAgICAgICAgICAgIH0pWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8gYWRkU2NyaXAgaW4gbWtXYXRjaAogICAgYWRkU2NyaXBMaXN0OiBmdW5jdGlvbiBhZGRTY3JpcExpc3QoX3JlZjUsIHBheWxvYWQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBkaXNwYXRjaDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNS5zdGF0ZSwgZGlzcGF0Y2ggPSBfcmVmNS5kaXNwYXRjaDsKICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSB0cnVlOwoKICAgICAgICAgICAgICAgIGlmICghKHN0YXRlLm13TGlzdC5sZW5ndGggPiAyNCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnRvYXN0ZXIoJycsICdpbmZvJywgIkNhbid0IGFkZCBtb3JlIHRoYW4gMjUgc2NyaXBzLlVzZSBhbm90aGVyIHRhYiIsIDMwMDApOwogICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuYWRkTmV3TXdTY3JpcChwYXlsb2FkLmFkZERlbCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YS5zdGF0ID09ICJPayIpIHsKICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLmRhdGFbImNoZWNrZWQiXSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ2dldE5ld013U2NyaXBMaXN0JywgcGF5bG9hZC5mZXRjaE13KTsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnRvYXN0ZXIoJycsICdzdWNjZXNzJywgJ1NjcmlwIGFkZGVkIHN1Y2Nlc3NmdWxseScsIDUwMCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlLmluY2x1ZGVzKCdTeW1ib2wgYWxyZWFkeSBleGl4dHMnKSkgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcudG9hc3RlcignJywgJ2luZm8nLCAnU2NyaXAgaXMgYWxyZWFkeSBwcmVzZW50IGluIGN1cnJlbnRUYWInLCAzMDAwKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLmVtc2cgPT0gIlNlc3Npb24gRXhwaXJlZCIpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnNlc3Npb25FeHBpcmUoKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLnN0YXQgPT0gIm5vdF9PayIgJiYgcmVzcG9uc2UuZGF0YS5tZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy50b2FzdGVyKCcnLCAnZGFuZ2VyJywgcmVzcG9uc2UuZGF0YS5tZXNzYWdlLCA1MDAwKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLmVyckxvZyhlcnIpOwogICAgICAgICAgICAgICAgfSlbImZpbmFsbHkiXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy8gZGVsZXRlU2NyaXAgaW4gbWtXYXRjaAogICAgZGVsZXRlU2NyaXBGcm9tTGlzdDogZnVuY3Rpb24gZGVsZXRlU2NyaXBGcm9tTGlzdChfcmVmNiwgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHsKICAgICAgICB2YXIgc3RhdGUsIGRpc3BhdGNoOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWY2LnN0YXRlLCBkaXNwYXRjaCA9IF9yZWY2LmRpc3BhdGNoOwogICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5kZWxldGVNd1NjcmlwKHBheWxvYWQuYWRkRGVsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCAmJiByZXNwb25zZS5kYXRhLnN0YXQgPT0gIk9rIikgewogICAgICAgICAgICAgICAgICAgIHBheWxvYWQuZGF0YVsiY2hlY2tlZCJdID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ2dldE5ld013U2NyaXBMaXN0JywgcGF5bG9hZC5mZXRjaE13KTsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnRvYXN0ZXIoJycsICdpbmZvJywgJ1NjcmlwIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5JywgNTAwKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5kYXRhLmVtc2cgPT0gJ05vdCBhYmxlIHRvIFJldHJpZXZlIE1hcmtldFdhdGNoICcgfHwgcmVzcG9uc2UuZGF0YS5lbXNnID09ICdOb3QgYWJsZSB0byBSZXRyaWV2ZSBNYXJrZXRXYXRjaCcgfHwgcmVzcG9uc2UuZGF0YS52YWx1ZXNbMF0gPT0gIk5vIE1hcmtldCBXYXRjaCIpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnRvYXN0ZXIoJycsICdkYW5nZXInLCByZXNwb25zZS5kYXRhLmVtc2csIDUwMCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5lbXNnID09ICJTZXNzaW9uIEV4cGlyZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5zZXNzaW9uRXhwaXJlKCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0ID09ICJub3RfT2siICYmIHJlc3BvbnNlLmRhdGEubWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcudG9hc3RlcignJywgJ2RhbmdlcicsIHJlc3BvbnNlLmRhdGEubWVzc2FnZSwgNTAwMCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5lcnJMb2coZXJyKTsKICAgICAgICAgICAgICAgIH0pWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgLy9zZWN1cml0eUluZm8KICAgIGdldFNlY3VyaXR5SW5mbzogZnVuY3Rpb24gZ2V0U2VjdXJpdHlJbmZvKF9yZWY3LCBwYXlsb2FkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBzdGF0ZSwganNvbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjcuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWY3LnJvb3RHZXR0ZXJzLCBzdGF0ZSA9IF9yZWY3LnN0YXRlOwogICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBqc29uID0gewogICAgICAgICAgICAgICAgICAiZXhjaCI6IHBheWxvYWQuZXgsCiAgICAgICAgICAgICAgICAgICJzeW1ib2wiOiBwYXlsb2FkLnRva2VuLAogICAgICAgICAgICAgICAgICAidXNlcklkIjogcm9vdEdldHRlcnNbJ2F1dGh0aWNhdGlvbi9nZXRVc2VySWQnXSwKICAgICAgICAgICAgICAgICAgInVzZXJTZXNzaW9uSUQiOiByb290R2V0dGVyc1snYXV0aHRpY2F0aW9uL2dldFVzZXJTZXNzaW9uJ10KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5nZXRTZWN1cml0eUluZm9EZXB0aEluZm8oanNvbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YSAhPSAiTm90X09rIikgewogICAgICAgICAgICAgICAgICAgIGNvbW1pdCgic2V0U2VjdXJpdHlJbmZvIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0ID09ICJOb3RfT2siICYmIHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuZXJyTG9nKGVycik7CiAgICAgICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIGdldCBnZXROZXdQcmljZVJhbmdlCiAgICBnZXROZXdQcmljZVJhbmdlOiBmdW5jdGlvbiBnZXROZXdQcmljZVJhbmdlKF9yZWY4LCBwYXlsb2FkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBzdGF0ZSwganNvbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTgkKF9jb250ZXh0OCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjguY29tbWl0LCByb290R2V0dGVycyA9IF9yZWY4LnJvb3RHZXR0ZXJzLCBzdGF0ZSA9IF9yZWY4LnN0YXRlOwogICAgICAgICAgICAgICAganNvbiA9IHsKICAgICAgICAgICAgICAgICAgImV4Y2giOiBwYXlsb2FkLmV4LnRvVXBwZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgICJzeW1ib2wiOiBwYXlsb2FkLnRva2VuLAogICAgICAgICAgICAgICAgICAidXNlcklkIjogcm9vdEdldHRlcnNbJ2F1dGh0aWNhdGlvbi9nZXRVc2VySWQnXSwKICAgICAgICAgICAgICAgICAgInVzZXJTZXNzaW9uSUQiOiByb290R2V0dGVyc1snYXV0aHRpY2F0aW9uL2dldFVzZXJTZXNzaW9uJ10KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5nZXRQcmljZVJhbmdlKGpzb24pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVtc2cgPT0gIlNlc3Npb24gRXhwaXJlZCIpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnNlc3Npb25FeHBpcmUoKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwICYmIHJlc3BvbnNlLmRhdGEgIT0gIk5vdF9PayIpIHsKICAgICAgICAgICAgICAgICAgICBjb21taXQoInNldFByaWNlUmFuZ2UiLCByZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLmVyckxvZyhlcnIpOwogICAgICAgICAgICAgICAgfSlbImZpbmFsbHkiXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIGNvbW1pdCgic2V0RGVwdGhMb2FkZXIiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpKCk7CiAgICB9LAoKICAgIC8qKgogICAgICogQGF1dGhvciBTZW50aGlsCiAgICAgKiBAZGF0ZSAwMi0xMi0yMDIxIAogICAgICogQG1ldGhvZCBTb3J0aW5nIE1rV2F0Y2ggbGlzdAogICAgICovCiAgICBzb3J0TGlzdDogZnVuY3Rpb24gc29ydExpc3QoX3JlZjkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgdmFyIHN0YXRlLCByb290R2V0dGVycywgc29ydEFycmF5LCB0YWJJbmRleCwgbXduYW1lLCBfaXRlcmF0b3IsIF9zdGVwLCBpLCB0ZW1wLCBnZXRTb3J0T2JqOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmOS5zdGF0ZSwgcm9vdEdldHRlcnMgPSBfcmVmOS5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHNvcnRBcnJheSA9IFtdOwogICAgICAgICAgICAgICAgdGFiSW5kZXggPSBwYXJzZUludChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgidGFiSW5kZXgiKSk7CiAgICAgICAgICAgICAgICBtd25hbWUgPSBzdGF0ZS5td0dyb3VwTmFtZXNbdGFiSW5kZXhdWydtYWtldFdhdGNoSWQnXTsKICAgICAgICAgICAgICAgIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN0YXRlLm13TGlzdCk7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgICAgICBpID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IHsKICAgICAgICAgICAgICAgICAgICAgIGV4Y2g6IGkuZXgsCiAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogaS50b2tlbiwKICAgICAgICAgICAgICAgICAgICAgIHNvcnRpbmdPcmRlcjogc3RhdGUubXdMaXN0LmluZGV4T2YoaSkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHNvcnRBcnJheS5wdXNoKHRlbXApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZ2V0U29ydE9iaiA9IHsKICAgICAgICAgICAgICAgICAgbXdJZDogbXduYW1lLAogICAgICAgICAgICAgICAgICB1c2VySWQ6IHJvb3RHZXR0ZXJzWydhdXRodGljYXRpb24vZ2V0VXNlcklkJ10sCiAgICAgICAgICAgICAgICAgIHNjcmlwRGF0YTogc29ydEFycmF5CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UubmV3U29ydFNjcmlwKGdldFNvcnRPYmopLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhWyJzdGF0Il0gPT0gIk5vdF9PayIgJiYgcmVzcG9uc2UuZGF0YVsiZW1zZyJdID09ICJTZXNzaW9uIEV4cGlyZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5zZXNzaW9uRXhwaXJlKCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5lcnJMb2coZXJyKTsKICAgICAgICAgICAgICAgIH0pWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkge30pOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTkpOwogICAgICB9KSkoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAYXV0aG9yIEFzaHdpbgogICAgICogQGRhdGUgMDktMTItMjAyMSAKICAgICAqIEBtZXRob2QgQWxlcnQgZGlhbG9nIEJveAogICAgICovCiAgICBhbGVydERpYWxvZzogZnVuY3Rpb24gYWxlcnREaWFsb2coX3JlZjEwLCBwYXlsb2FkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdCwganNvbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjEwLnN0YXRlLCBjb21taXQgPSBfcmVmMTAuY29tbWl0OwogICAgICAgICAgICAgICAgc3RhdGUuYWxlcnRMb2FkZXIgPSB0cnVlOwogICAgICAgICAgICAgICAganNvbiA9IHsKICAgICAgICAgICAgICAgICAgZXhjaDogcGF5bG9hZC5kYXRhLmV4LAogICAgICAgICAgICAgICAgICB2YWx1ZTogcGF5bG9hZC5kYXRhLnRva2VuLAogICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHBheWxvYWQuYWxlcnRQcmljZSA8PSBwYXlsb2FkLmRhdGEubHRwID8gImwiIDogImciLAogICAgICAgICAgICAgICAgICBzeW1ib2w6IHBheWxvYWQuZGF0YS50b2tlbgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5zZWNyaXR5QWxlcnRUcmFkZShqc29uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5hbGVydExvYWRlciA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YSAhPSAiTm90X09rIiAmJiByZXNwb25zZS5kYXRhLnN0YXQgPT0gIk9rIikgewogICAgICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0QWxlcnREaWFsb2cnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy50b2FzdGVyKCJTdWJzY3JpYmUgU3VjY2Vzc2Z1bGx5IiwgInN1Y2Nlc3MiLCByZXNwb25zZS5kYXRhLlJlc3VsdCwgNDAwMCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0ID09ICJOb3RfT2siICYmIHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuZXJyTG9nKGVycik7CiAgICAgICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEwKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2hlY2tTb2NrZXRTdGF0dXM6IGZ1bmN0aW9uIGNoZWNrU29ja2V0U3RhdHVzKF9yZWYxMSwgcGF5bG9hZCkgewogICAgICB2YXIgc3RhdGUgPSBfcmVmMTEuc3RhdGUsCiAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYxMS5yb290R2V0dGVycywKICAgICAgICAgIGRpc3BhdGNoID0gX3JlZjExLmRpc3BhdGNoOwoKICAgICAgaWYgKHJvb3RHZXR0ZXJzWyd3c0Nvbm5lY3Rpb24vZ2V0Q29ubmVjdGlvblN0YXR1ZSddKSB7CiAgICAgICAgdmFyIHRlbXBEYXRhID0gewogICAgICAgICAgZGF0YTogc3RhdGUubXdMaXN0LAogICAgICAgICAgd2hlcmU6ICdta1dhdGNoJwogICAgICAgIH07CiAgICAgICAgZGlzcGF0Y2goIndzQ29ubmVjdGlvbi93ZWJzb2NrZXRTdWJzY3JpcHRpb24iLCB0ZW1wRGF0YSwgewogICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgbmV3TWFya2V0V2F0Y2g6IGZ1bmN0aW9uIG5ld01hcmtldFdhdGNoKF9yZWYxMiwgcGF5bG9hZCkgewogICAgICB2YXIgc3RhdGUgPSBfcmVmMTIuc3RhdGUsCiAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYxMi5yb290R2V0dGVycywKICAgICAgICAgIGRpc3BhdGNoID0gX3JlZjEyLmRpc3BhdGNoLAogICAgICAgICAgY29tbWl0ID0gX3JlZjEyLmNvbW1pdDsKICAgICAgc2VydmljZS5uZXdNd0xpc3QocGF5bG9hZCkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgIGlmIChyZXNwLnN0YXR1cyA9PSAyMDAgJiYgcmVzcC5kYXRhLnN0YXQgPT0gJ25vdF9PaycpIHsKICAgICAgICAgIGRpc3BhdGNoKCdnZW5lcmF0ZU13TmFtZScsIHBheWxvYWQpOwogICAgICAgIH0gZWxzZSBpZiAocmVzcC5zdGF0dXMgPT0gMjAwICYmIHJlc3AuZGF0YS5zdGF0ID09ICdPaycgJiYgcmVzcC5kYXRhLnJlc3VsdCAmJiByZXNwLmRhdGEubWVzc2FnZSA9PSAnU3VjY2VzcycpIHsKICAgICAgICAgIGRpc3BhdGNoKCd3c0Nvbm5lY3Rpb24vaW5WYWxpZGF0ZVNlc3Npb24nLCAnaW5pdGlhbCcsIHsKICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIganNvbiA9IHsKICAgICAgICAgICAgdXNlcklkOiBwYXlsb2FkLnVzZXJJZCwKICAgICAgICAgICAgbXdJZDogcmVzcC5kYXRhLnJlc3VsdFswXVsnbWFrZXRXYXRjaElkJ10KICAgICAgICAgIH07CiAgICAgICAgICBjb21taXQoJ3NldE13R3JvdXBOYW1lcycsIHJlc3AuZGF0YS5yZXN1bHQpOwogICAgICAgICAgZGlzcGF0Y2goJ2dldE5ld013U2NyaXBMaXN0JywganNvbik7CiAgICAgICAgICByb3V0ZXIucHVzaCgnL2hvbWUnKVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7fSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBnZW5lcmF0ZU13TmFtZTogZnVuY3Rpb24gZ2VuZXJhdGVNd05hbWUoX3JlZjEzLCBwYXlsb2FkKSB7CiAgICAgIHZhciBzdGF0ZSA9IF9yZWYxMy5zdGF0ZSwKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjEzLnJvb3RHZXR0ZXJzLAogICAgICAgICAgZGlzcGF0Y2ggPSBfcmVmMTMuZGlzcGF0Y2gsCiAgICAgICAgICBjb21taXQgPSBfcmVmMTMuY29tbWl0OwogICAgICBzZXJ2aWNlLm5ld0dlbk13TmFtZShwYXlsb2FkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwICYmIHJlc3BvbnNlLmRhdGEuc3RhdCA9PSAnT2snICYmIHJlc3BvbnNlLmRhdGEubWVzc2FnZSA9PSAnTWFya2V0IFdhdGNoIENyZWF0ZWQgU3VjY2Vzc2Z1bGx5JykgewogICAgICAgICAgZGlzcGF0Y2goJ25ld01hcmtldFdhdGNoJywgcGF5bG9hZCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBnZXROZXdNd1NjcmlwTGlzdDogZnVuY3Rpb24gZ2V0TmV3TXdTY3JpcExpc3QoX3JlZjE0LCBwYXlsb2FkKSB7CiAgICAgIHZhciBzdGF0ZSA9IF9yZWYxNC5zdGF0ZSwKICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjE0LnJvb3RHZXR0ZXJzLAogICAgICAgICAgZGlzcGF0Y2ggPSBfcmVmMTQuZGlzcGF0Y2gsCiAgICAgICAgICBjb21taXQgPSBfcmVmMTQuY29tbWl0OwogICAgICBzZXJ2aWNlLmdldE5ld013U2NyaXBzKHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICBpZiAocmVzcC5zdGF0dXMgPT0gMjAwICYmIHJlc3AuZGF0YS5zdGF0ID09ICdub3RfT2snICYmIHJlc3AuZGF0YS5tZXNzYWdlID09ICdObyBEYXRhJykgewogICAgICAgICAgY29tbWl0KCdzZXROb2RhdGEnLCB0cnVlKTsKICAgICAgICAgIGNvbW1pdCgnc2V0TXdsaXN0JywgW10pOwogICAgICAgIH0gZWxzZSBpZiAocmVzcC5zdGF0dXMgPT0gMjAwICYmIHJlc3AuZGF0YS5zdGF0ID09ICdPaycgJiYgcmVzcC5kYXRhLm1lc3NhZ2UgPT0gJ1N1Y2Nlc3MnKSB7CiAgICAgICAgICBjb21taXQoJ3NldE5vZGF0YScsIGZhbHNlKTsKICAgICAgICAgIGNvbW1pdCgnc2V0TXdsaXN0JywgcmVzcC5kYXRhLnJlc3VsdCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIGdldHRlcnM6IHsKICAgIGdldEFsZXJ0RGlhbG9nOiBmdW5jdGlvbiBnZXRBbGVydERpYWxvZyhzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuYWxlcnREaWFsb2c7CiAgICB9LAogICAgZ2V0TXdMaXN0OiBmdW5jdGlvbiBnZXRNd0xpc3Qoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLm13TGlzdDsKICAgIH0sCiAgICBnZXREZXB0aExpc3Q6IGZ1bmN0aW9uIGdldERlcHRoTGlzdChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUucHJpY2VSYWdlRGF0YTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IG1rV2F0Y2g7"},{"version":3,"sources":["/home/stoneage/vueJs projects/trustLineTradeVuex/src/store/modules/marketWatch.js"],"names":["service","errorHandling","router","mkWatch","namespaced","state","mwGroupNames","mwList","nodata","searchList","securityInfoData","priceRageData","alertDialog","loading","alertLoader","depthLoader","authDialog","mutations","setMwGroupNames","data","localStorage","setItem","JSON","stringify","setMwlist","forEach","el","Change","PerChange","chart","InstName","insType","chartExchange","ex","chartToken","token","ltp","pdc","parseFloat","toFixed","toLowerCase","chartSymbol","symbol","toLocaleUpperCase","arr","scripName","split","tempScrip","tempSymbol","dispatch","setNodata","setSearchList","setSecurityInfo","setPriceRange","setAlertDialog","setDepthLoader","setAuthDialog","payload","actions","getMwlistNames","commit","rootGetters","json","userId","fetchMWList","then","response","emsg","currentRoute","path","localClear","sessionExpire","status","stat","url","root","err","errLog","fetchMwLists","fetchMWScripList","values","mwData","volume","Exchange","push","length","tempData","where","autoGenerateMW","mwName","tempMwName","randomNumber","Math","floor","random","alpha","temp","element","getSearchScripts","exchange","toString","toUpperCase","getSearchScrip","searchData","mwListData","addScripList","toaster","addNewMwScrip","addDel","fetchMw","message","includes","deleteScripFromList","deleteMwScrip","getSecurityInfo","getSecurityInfoDepthInfo","getNewPriceRange","getPriceRange","sortList","sortArray","tabIndex","parseInt","getItem","mwname","i","exch","sortingOrder","indexOf","getSortObj","mwId","scripData","newSortScrip","value","direction","alertPrice","secrityAlertTrade","Result","checkSocketStatus","newMarketWatch","newMwList","resp","result","generateMwName","newGenMwName","getNewMwScripList","getNewMwScrips","getters","getAlertDialog","getMwList","getDepthList"],"mappings":"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","sourcesContent":["import service from \"../Services/httpservice\"\nimport errorHandling from '../Services/errorHandling';\nimport router from '../../router'\n\nconst mkWatch = {\n    namespaced: true,\n\n    state: {\n        mwGroupNames: [],\n        mwList: [],\n        nodata: false,\n        searchList: [],\n        securityInfoData: [],\n        priceRageData: [],\n        alertDialog:false,\n        loading: false,\n        alertLoader: false,\n        depthLoader:false,\n        authDialog: false,\n    },\n\n    mutations: {\n        setMwGroupNames(state, data) {\n            state.mwGroupNames = data;\n            localStorage.setItem('mwList', JSON.stringify(data))\n        },\n        setMwlist(state ,data) {\n            state.mwList = []\n            state.mwList = data\n            state.mwList.forEach(el =>{\n                \n                el.Change = '0.00'\n                el.PerChange = '0.00'\n                el.chart = 'mw'\n                el.InstName = el.insType\n                el.chartExchange = el.ex\n                el.chartToken = el.token\n                if(el.ltp > 0 && el.pdc){\n                    el.Change = parseFloat(el.pdc) - parseFloat(el.ltp)\n                    el.PerChange = el.Change / 100\n                }\n                el.PerChange = parseFloat(el.PerChange).toFixed(2)\n\n                if(el.insType.toLowerCase() == 'index'){\n                    el.chartSymbol = el.symbol + '::' + el.ex.toLocaleUpperCase() + '::INDEX' \n                }else{\n                    var arr = el.scripName.split(' ')\n                    var tempScrip = ''\n                    arr.forEach(el =>{\n                        tempScrip +=el\n                    })\n                    var tempSymbol = el.ex == \"MCX\" || el.ex == \"BSE\" || el.ex == \"CDS\" || el.ex == \"BCD\" ? el.symbol : el.ex == \"NSE\"  ? el.symbol.split('-')[0] : tempScrip\n                    el.chartSymbol = tempSymbol + '::' + el.ex.toLocaleUpperCase() + ':::' + el.ex + ':::' + el.token;  \n                }\n            })\n        \n            \n\n            this.dispatch('marketWatch/checkSocketStatus')\n        },\n        setNodata(state, data) {\n            state.nodata = data;\n        },\n        setSearchList(state, data) {\n            state.searchList = data;\n        },\n        setSecurityInfo(state, data) {\n            state.securityInfoData = data;\n        },\n        setPriceRange(state, data) {\n            state.priceRageData = [];\n            state.priceRageData = data;\n        },\n        setAlertDialog(state, data){\n            state.alertDialog = data;\n        },\n        setDepthLoader(state, data) {\n            state.depthLoader = data;\n        },\n        setAuthDialog(state, payload){\n            state.authDialog = payload\n        }\n    },\n\n    actions: {\n        // get marketwatch names\n        async getMwlistNames({ commit, state, rootGetters, dispatch }) {\n            state.loading = true;\n            let json = {\n                userId: rootGetters['authtication/getUserId']\n            };\n            await service.fetchMWList(json).then(response => {\n                if (response.data.emsg == \"Session Expired\") {\n                    router.currentRoute.path == '/' ? errorHandling.localClear() : errorHandling.sessionExpire();\n                }else if (response.status == 200 && response.data.stat == \"Ok\") {\n                    if(rootGetters['getSsoType'] == ''){\n\n                        dispatch('newMarketWatch', {\"userId\": rootGetters['authtication/getUserId']})\n                \n                    // if (response.data.values.length == 5) {\n                    //     commit(\"setMwGroupNames\", response.data.values);\n                    //     router.currentRoute.path == '/' ? router.push('/home').catch(()=> {}) : ''\n                    // } else {\n                    //     dispatch(\"autoGenerateMW\", response.data.values);\n                    // }\n                }else{\n                    dispatch('authtication/generateAuthCode', { url: \"orders\" }, {root: true}) \n                }\n                }\n            }, (err) => {\n                router.currentRoute.path == '/' ? errorHandling.localClear() : errorHandling.errLog(err);\n                \n            }).finally(() => { state.loading = false; })\n        },\n\n        // fetch current marketwatch list\n        async fetchMwLists({ commit, state, dispatch }, payload) {\n            state.loading = true;\n            await service.fetchMWScripList(payload).then(response => {\n                if (response.data.emsg == \"Session Expired\") {\n                    errorHandling.sessionExpire();\n                }else if (response.status == 200 && response.data.stat == \"Ok\" && response.data.values[0] !== \"No Market Watch\") {\n                    commit('setNodata', false)\n                    \n                    // check unwanted scrips \n                    var mwData = []\n                    response.data.values.forEach(el => {\n                        el.volume = '',\n                        el.chart = 'mw'\n                        if (el.Exchange != 'X' && el.token != '100' ) {\n                            mwData.push(el)\n                        }\n                    })\n                    if(mwData.length == 0) { \n                      commit('setNodata', true)\n                      commit('setMwlist', [])\n                    }\n                    var tempData = {\n                        data: mwData,\n                        where: 'mkWatch'\n                    }\n                    // ----------------------------------------------\n                    dispatch('common/formatScrip' , tempData , { root: true })\n                } else if (response.data.emsg == 'Not able to Retrieve MarketWatch ' || response.data.emsg == 'Not able to Retrieve MarketWatch'\n                           || response.data.values[0] == \"No Market Watch\") {\n                    commit('setNodata', true)\n                    commit('setMwlist', [])\n                }\n                else {\n                    commit('setNodata', true)\n                    commit('setMwlist', [])\n                }\n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { \n                state.loading = false \n            })\n        },\n\n        // autogenerate marketwatch names\n        async autoGenerateMW({ commit }, payload) {\n            var mwName = \"mwGrp\";\n            var tempMwName = payload\n            while (payload.length != 5 && payload.length <= 5) {\n                var randomNumber = Math.floor(Math.random() * 25);\n                var alpha = [\n                    \"a\",\n                    \"b\",\n                    \"c\",\n                    \"d\",\n                    \"e\",\n                    \"f\",\n                    \"g\",\n                    \"h\",\n                    \"i\",\n                    \"j\",\n                    \"k\",\n                    \"l\",\n                    \"m\",\n                    \"n\",\n                    \"o\",\n                    \"p\",\n                    \"q\",\n                    \"r\",\n                    \"s\",\n                    \"t\",\n                    \"u\",\n                    \"v\",\n                    \"w\",\n                    \"x\",\n                    \"y\",\n                    \"z\"\n                ];\n                var temp = mwName + alpha[randomNumber];\n                mwName += alpha[randomNumber];\n                payload.forEach(element => {\n                    if (element != temp) {\n                        mwName = temp;\n                    }\n                });\n                tempMwName.push(mwName)\n            }\n            commit(\"setMwGroupNames\", await tempMwName);\n            router.currentRoute.path == '/' ? router.push('/home').catch(()=> {}) : ''\n        },\n\n        // search scrip list\n        async getSearchScripts({ state, commit }, payload) {\n            state.loading = true;\n            let json = {\n                exchange: [\"All\", \"CDS\", \"MCX\", \"NFO\", \"NSE\", \"BSE\"],\n                symbol: payload ? payload.toString().toUpperCase() : ''\n            };\n            await service.getSearchScrip(json).then(response => {\n                if (response.status == 200) {\n                    response.data.forEach((searchData) => {\n                        state.mwList.forEach((mwListData) => {\n                            if (mwListData[\"token\"] == searchData[\"token\"] &&  mwListData[\"Exchange\"] != \"X\") {\n                                return searchData[\"checked\"] = true;\n                            } \n                        })\n                    })\n                    commit(\"setSearchList\", response.data);\n                } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n                    errorHandling.sessionExpire();\n                }\n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { \n                state.loading = false;\n             })\n        },\n\n        // addScrip in mkWatch\n        async addScripList({ state,dispatch }, payload) {\n            state.loading = true;\n            if (state.mwList.length > 24) {\n                errorHandling.toaster('', 'info', \"Can't add more than 25 scrips.Use another tab\", 3000)\n                state.loading = false;\n                return;\n            }else{\n                await service.addNewMwScrip(payload.addDel).then(response => {\n                    if (response.status == 200 && response.data.stat == \"Ok\") {\n                        payload.data[\"checked\"] = true;\n                        dispatch('getNewMwScripList', payload.fetchMw)\n                        errorHandling.toaster('', 'success', 'Scrip added successfully', 500);\n                    } else if (response.data.message.includes('Symbol already exixts')) {\n                        errorHandling.toaster('', 'info', 'Scrip is already present in currentTab', 3000);\n                    } else if (response.data.emsg == \"Session Expired\") {\n                        errorHandling.sessionExpire();\n                    }else if(response.data.stat == \"not_Ok\" && response.data.message){\n                        errorHandling.toaster('', 'danger', response.data.message, 5000)\n                    }\n                }, (err) => {\n                    errorHandling.errLog(err)\n                }).finally(() => { \n                    state.loading = false;\n                })\n            }\n        }, \n\n        // deleteScrip in mkWatch\n        async deleteScripFromList({ state, dispatch }, payload) {\n            state.loading = true;\n            await service.deleteMwScrip(payload.addDel).then(response => {\n                if (response.status == 200 && response.data.stat == \"Ok\") {\n                    payload.data[\"checked\"] = false;\n                    dispatch('getNewMwScripList', payload.fetchMw)\n                    errorHandling.toaster('', 'info', 'Scrip deleted successfully', 500);\n                }else if (response.data.emsg == 'Not able to Retrieve MarketWatch ' || response.data.emsg == 'Not able to Retrieve MarketWatch'\n                || response.data.values[0] == \"No Market Watch\") {\n                    errorHandling.toaster('', 'danger', response.data.emsg, 500);\n                }\n                 else if (response.data.emsg == \"Session Expired\") {\n                    errorHandling.sessionExpire();\n                }else if(response.data.stat == \"not_Ok\" && response.data.message){\n                    errorHandling.toaster('', 'danger', response.data.message, 5000)\n                }\n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { \n                state.loading = false;\n            })\n        },\n\n        //securityInfo\n        async getSecurityInfo({ commit, rootGetters, state }, payload) {\n            state.loading = true;\n            let json = {\n                \"exch\": payload.ex,\n                \"symbol\": payload.token,\n                \"userId\": rootGetters['authtication/getUserId'],\n                \"userSessionID\": rootGetters['authtication/getUserSession']\n            }\n            await service.getSecurityInfoDepthInfo(json).then(\n                response => {\n                    if (response.status == 200 && response.data != \"Not_Ok\") {\n                        commit(\"setSecurityInfo\", response.data);\n                    } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n                        errorHandling.sessionExpire();\n                    }\n                },\n                err => {\n                    errorHandling.errLog(err)\n                }\n            ).finally(() => { state.loading = false; })\n        },\n\n        // get getNewPriceRange\n        async getNewPriceRange({ commit, rootGetters, state }, payload) {\n            let json = {\n                \"exch\": payload.ex.toUpperCase(),\n                \"symbol\": payload.token,\n                \"userId\": rootGetters['authtication/getUserId'],\n                \"userSessionID\": rootGetters['authtication/getUserSession']\n            }\n            await service.getPriceRange(json).then(\n                response => {\n                    if (response.data.emsg == \"Session Expired\") {\n                      errorHandling.sessionExpire();\n                    }else if (response.status == 200 && response.data != \"Not_Ok\") {\n                        commit(\"setPriceRange\", response.data);\n                    }\n                },\n                err => {\n                    errorHandling.errLog(err)\n                }).finally(() => { commit(\"setDepthLoader\", false)});\n        },\n\n        /**\n         * @author Senthil\n         * @date 02-12-2021 \n         * @method Sorting MkWatch list\n         */\n        async sortList({ state, rootGetters }) {\n            var sortArray = [];\n            var tabIndex = parseInt(localStorage.getItem(\"tabIndex\"));\n            var mwname = state.mwGroupNames[tabIndex]['maketWatchId']\n            for (let i of state.mwList) {\n                let temp =  {\n                    exch : i.ex,\n                    token : i.token,\n                    sortingOrder : state.mwList.indexOf(i)\n                }\n                sortArray.push(temp);\n            }\n            var getSortObj = {\n                mwId: mwname,\n                userId: rootGetters['authtication/getUserId'],\n                scripData :sortArray\n            };\n            await service.newSortScrip(getSortObj).then(response => {\n                if (response.data[\"stat\"] == \"Not_Ok\" && response.data[\"emsg\"] == \"Session Expired\" ) {\n                    errorHandling.sessionExpire();\n                } \n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { })\n        },\n\n        /**\n         * @author Ashwin\n         * @date 09-12-2021 \n         * @method Alert dialog Box\n         */\n        async alertDialog({state,commit }, payload) {\n            state.alertLoader = true\n            let json = {\n                exch: payload.data.ex,\n                value: payload.data.token,\n                direction: payload.alertPrice <= payload.data.ltp ? \"l\" : \"g\",\n                symbol: payload.data.token,\n            }\n            await service.secrityAlertTrade(json).then(\n                response => {\n                    state.alertLoader = false\n                    if (response.status == 200 && response.data != \"Not_Ok\" && response.data.stat == \"Ok\") {\n                        commit('setAlertDialog',false)\n                        errorHandling.toaster(\"Subscribe Successfully\", \"success\", response.data.Result, 4000)\n                    } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n                        errorHandling.sessionExpire();\n                    }\n                },\n                err => {\n                    errorHandling.errLog(err)\n                }\n            ).finally(() => { state.loading = false; })\n        },\n\n        checkSocketStatus({state , rootGetters , dispatch}, payload){\n            if(rootGetters['wsConnection/getConnectionStatue']){\n                var tempData = {\n                    data: state.mwList,\n                    where: 'mkWatch'\n                }\n\n                dispatch(\"wsConnection/websocketSubscription\", tempData, { root: true }) \n            }\n        },\n\n        newMarketWatch({state, rootGetters, dispatch, commit}, payload){\n            service.newMwList(payload).then(resp =>{\n                if(resp.status == 200 && resp.data.stat == 'not_Ok'){\n                    dispatch('generateMwName' , payload)\n                }else if(resp.status == 200 && resp.data.stat == 'Ok' && resp.data.result  && resp.data.message == 'Success'){\n                    dispatch('wsConnection/inValidateSession', 'initial' , { root:true })\n                    let json = {\n                        userId:payload.userId,\n                        mwId: resp.data.result[0]['maketWatchId']\n                    }\n                    commit('setMwGroupNames',resp.data.result)\n                    dispatch('getNewMwScripList' , json)\n                    router.push('/home').catch(()=> {})\n                }\n            })\n        },\n\n        generateMwName({state, rootGetters, dispatch, commit}, payload){\n            service.newGenMwName(payload).then(response =>{\n                if(response.status == 200 && response.data.stat == 'Ok' && response.data.message == 'Market Watch Created Successfully'){\n                    dispatch('newMarketWatch', payload)\n                }\n            })\n        },\n\n        getNewMwScripList({state, rootGetters, dispatch, commit}, payload){\n            service.getNewMwScrips(payload).then(resp =>{\n                if(resp.status == 200 && resp.data.stat == 'not_Ok' && resp.data.message == 'No Data'){\n                    commit('setNodata', true)\n                    commit('setMwlist' , [])\n                }else if(resp.status == 200 && resp.data.stat == 'Ok' && resp.data.message == 'Success'){\n                    commit('setNodata', false)\n                    commit('setMwlist' , resp.data.result)\n                }\n            })\n        }\n        \n    },\n    getters:{\n        getAlertDialog: state => {\n            return state.alertDialog\n        },\n        getMwList: state => {\n            return state.mwList\n        },\n        getDepthList: state => {\n            return state.priceRageData\n        },\n    }\n};\nexport default mkWatch;"]}]}