{"remainingRequest":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/babel-loader/lib/index.js!/home/stoneage/vueJs projects/trustLineTradeVuex/src/store/modules/settings.js","dependencies":[{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/src/store/modules/settings.js","mtime":1655307156181},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/babel.config.js","mtime":1649344700943},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/trustLineTradeVuex/node_modules/babel-loader/lib/index.js","mtime":1655272566942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/stoneage/vueJs projects/trustLineTradeVuex/src/store/modules/settings.js"],"names":["service","router","errorHandling","settings","namespaced","state","userDetails","resetMpin","resetSQues","resetPass","marketStatus","nseStatus","bseStatus","mcxStatus","nseMessages","bseMessages","mcxMessages","generateApiKey","apiKeyDetails","apiAvailble","apikeys","expriedapi","regenerateApiKey","generateApiDialog","settingsLoader","apiLoader","mutations","setCustomerDetails","payload","convertProducts","toString","arr","includes","split","sliceName","item","slice","toUpperCase","shortName","setResetMpin","setResetSques","setResetPass","setMarketStatus","bscarray","nscarray","mcxarray","i","length","MarketMode","MktStatus","setNseMessages","setBseMessages","setMcxMessages","setApiKeyDetails","setGenerateApiDialog","actions","getCustomerDetails","commit","rootGetters","json","userId","getAccountDetails","then","response","status","data","stat","emsg","sessionExpire","err","errLog","getResetMpin","mpin","toaster","Emsg","getResetSques","email","resetTwoFa","userSessionID","getMarketstatus","getMarketMessages","userFetch","exch","resp","Exchmsg","getApiKey","getAPIKeyService","dispatch","generateAPIKey","getReGenerateAPIKeys","regenerateAPIKeyService","getters","getgenerateApiDialog"],"mappings":"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","sourcesContent":["import service from \"../Services/httpservice\";\nimport router from '@/router'\nimport errorHandling from \"../Services/errorHandling\";\nconst settings = {\n  namespaced: true,\n\n  state: {\n    userDetails: [],\n    resetMpin: [],\n    resetSQues: [],\n    resetPass: [],\n    marketStatus: [],\n    nseStatus: '',\n    bseStatus: '',\n    mcxStatus: '',\n    nseMessages: [],\n    bseMessages: [],\n    mcxMessages: [],\n    generateApiKey: [],\n    apiKeyDetails: [],\n    apiAvailble: [],\n    apikeys: [],\n    expriedapi: [],\n    regenerateApiKey: [],\n    generateApiDialog: false,\n    settingsLoader: false,\n    apiLoader: false\n  },\n  mutations: {\n    setCustomerDetails (state, payload) {\n      payload['product'] ? payload.convertProducts = payload['product'].toString() : ''\n      var arr = [];\n        \n      if(payload[\"accountName\"].includes(\" \")){\n        arr = payload[\"accountName\"].split(\" \");\n  \n        var sliceName = ''\n        for (let item of arr) {\n          item ? sliceName += item[0].slice(0, 1).toUpperCase() + \" \" : ''\n        }\n      }else{\n        sliceName =  payload[\"accountName\"][0]\n      }\n      payload.shortName = sliceName\n      state.userDetails = payload;\n    },\n    setResetMpin (state, payload) {\n      state.resetMpin = payload;\n    },\n    setResetSques (state, payload) {\n      state.resetSQues = payload;\n    },\n    setResetPass (state, payload) {\n      state.resetPass = payload;\n    },\n    setMarketStatus (state, payload) {\n      state.marketStatus = payload;\n      var bscarray = payload[\"bse\"];\n      var nscarray = payload[\"nse\"];\n      var mcxarray = payload[\"mcx\"];\n      for (var i = 0; i < nscarray.length; i++) {\n        if (nscarray[i].MarketMode == \"Normal Market\") {\n          state.nseStatus = nscarray[i].MktStatus;\n        }\n      }\n      for (var i = 0; i < bscarray.length; i++) {\n        if (bscarray[i].MarketMode == \"Normal Market\") {\n          state.bseStatus = bscarray[i].MktStatus;\n        }\n      }\n      for (var i = 0; i < mcxarray.length; i++) {\n        if (mcxarray[i].MarketMode == \"Normal market\" || mcxarray[i].MarketMode == \"Normal Market\") {\n          state.mcxStatus = mcxarray[i].MktStatus;\n        }\n      }\n    },\n    setNseMessages (state, payload) {\n      state.nseMessages = payload.split(\"/n\")\n    },\n    setBseMessages (state, payload) {\n      state.bseMessages = payload.split(\"/n\")\n    },\n    setMcxMessages (state, payload) {\n      state.mcxMessages = payload.split(\"/n\")\n    },\n    setApiKeyDetails (state, payload) {\n      state.apiKeyDetails = payload;\n    },\n    setGenerateApiDialog (state, payload) {\n      state.generateApiDialog = payload\n    }\n\n  },\n  actions: {\n\n    /****\n     * @author Ashwin\n     * @since 01/12/21\n     * Method for get customer details\n     *****/\n\n    async getCustomerDetails ({\n      commit,\n      rootGetters,\n      state\n    }) {\n      state.settingsLoader = true\n      let json = {\n        userId: rootGetters['authtication/getUserId'],\n      };\n      await service.getAccountDetails(json).then(\n        response => {\n          \n          if (response.status == 200 && response.data != \"Not_Ok\" && response.data.stat == \"Ok\") {\n\n            commit(\"setCustomerDetails\", response.data);\n          } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n            errorHandling.sessionExpire()\n          }\n        },\n        (err) => {\n          errorHandling.errLog(err)\n        }).finally(() => { state.settingsLoader = false });\n\n    },\n\n    /****\n     * @author Ashwin\n     * @since 01/12/21\n     * Method for reset mpin\n     *****/\n    async getResetMpin ({\n      commit,\n      rootGetters\n    }, payload) {\n      let json = {\n        userId: rootGetters['authtication/getUserId'],\n        mpin: payload\n      };\n      await service.resetMpin(json).then(\n        response => {\n          if (response.status == 200 && response.data != \"Not_Ok\") {\n            errorHandling.toaster(\"\", \"success\", \"MPIN Modified successfully\", 3000)\n          } else if (response.data.Emsg == \"Session Expired\" || response.data.emsg == \"Session Expired\") {\n            errorHandling.sessionExpire()\n          }\n        },\n        (err) => {\n          errorHandling.errLog(err)\n        }\n      );\n    },\n\n    /****\n     * @author Ashwin\n     * @since 01/12/21\n     * Method for reset security questions\n     *****/\n     async getResetSques ({commit,rootGetters}, payload) {\n      let json = {\n        userId: rootGetters['authtication/getUserId'],\n        email: payload\n      };\n      await service.resetTwoFa(json).then(\n        response => {\n          if (response.status == 200 && response.data.stat != \"Not_Ok\") {\n            errorHandling.toaster( \" \",\"success\",\"2FA reset has been successful.\", 3000)\n          } else if (response.data.Emsg == \"Session Expired\" || response.data.emsg == \"Session Expired\") {\n            errorHandling.sessionExpire()\n          }else{\n            errorHandling.toaster(\" \",\"danger\", \"2FA reset has been successful.\", 3000)\n          }\n        },\n        (err) => {\n          errorHandling.errLog(err)\n        }\n      );\n    },\n\n    /****\n     * @author Ashwin\n     * @since 04/12/21\n     * Method for market messages\n     *****/\n    async marketStatus ({\n      state,\n      commit,\n      rootGetters\n    }) {\n      state.settingsLoader = true\n      let json = {\n        userId: rootGetters['authtication/getUserId'],\n        userSessionID: rootGetters['authtication/getUserSession']\n      };\n      await service.getMarketstatus(json).then(\n        response => {\n          if (response.status == 200 && response.data != \"Not_Ok\") {\n            commit(\"setMarketStatus\", response.data);\n          } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n            errorHandling.sessionExpire()\n          }\n        },\n        (err) => {\n          errorHandling.errLog(err)\n        }\n      ).finally(() => { state.settingsLoader = false });\n    },\n\n    async getMarketMessages ({\n      state,\n      commit,\n      rootGetters\n    }, payload) {\n      state.settingsLoader = true\n      let userFetch = {\n        exch: payload,\n        userId: rootGetters['authtication/getUserId'],\n        userSessionID: rootGetters['authtication/getUserSession']\n      };\n      service.getMarketMessages(userFetch).then(resp => {\n        if (resp.status === 200 && resp.data.stat == 'Ok' && resp.data.Exchmsg != 'No Data') {\n\n          if (payload == 'NSE') {\n            commit('setNseMessages', resp.data.Exchmsg)\n          }\n          if (payload == 'BSE') {\n            commit('setBseMessages', resp.data.Exchmsg)\n          }\n          if (payload == 'MCX') {\n            commit('setMcxMessages', resp.data.Exchmsg)\n          }\n        } else if (resp.data.stat == \"Not_Ok\" && resp.data.emsg == \"Session Expired\") {\n          errorHandling.sessionExpire()\n        }\n      },\n        (err) => {\n          errorHandling.errLog(err)\n        }\n       ).finally(() => { state.settingsLoader = false });\n    },\n\n    /****\n     * @author Ashwin\n     * @since 07/12/21\n     * Method for get API Key\n     *****/\n    async getApiKey ({ commit }) {\n      await service.getAPIKeyService().then(response => {\n        if (response.status == 200 && response.data[\"status\"] == \"Not_Ok\" && response.data[\"available\"] == false) {\n          commit(\"setApiKeyDetails\", response.data);\n        } else if (response.data[\"status\"] == \"Ok\") {\n          commit(\"setApiKeyDetails\", response.data);\n        } else if (response.data.emsg == \"Session Expired\") {\n          errorHandling.sessionExpire()\n        }\n      },\n        (err) => {\n          errorHandling.errLog(err)\n        });\n    },\n\n    /****\n     * @author Ashwin\n     * @since 08/12/21\n     * Method for generate API Key\n     *****/\n    async generateApiKey ({ state, commit, dispatch }) {\n      state.apiLoader = true\n      await service.generateAPIKey().then(response => {\n        state.apiLoader = false\n        if (response.status == 200) {\n          dispatch('getApiKey')\n          commit('setGenerateApiDialog', false)\n        } else if (response.data.emsg == \"Session Expired\") {\n          errorHandling.sessionExpire()\n        }\n      },\n        (err) => {\n          errorHandling.errLog(err)\n        });\n    },\n\n    /****\n     * @author Ashwin\n     * @since 08/12/21\n     * Method for Regenerate API Key\n     *****/\n    async getReGenerateAPIKeys ({\n      state, commit, dispatch\n    }) {\n      state.apiLoader = true\n      await service.regenerateAPIKeyService().then(response => {\n        state.apiLoader = false\n        if (response.status == 200) {\n          dispatch('getApiKey')\n          commit('setGenerateApiDialog', false)\n        } else if (response.data.emsg == \"Session Expired\") {\n          errorHandling.sessionExpire()\n        }\n      },\n        (err) => {\n          errorHandling.errLog(err)\n        });\n    }\n\n  },\n\n  getters: {\n    getgenerateApiDialog (state) {\n      return state.generateApiDialog\n    }\n  }\n\n};\nexport default settings;"]}]}