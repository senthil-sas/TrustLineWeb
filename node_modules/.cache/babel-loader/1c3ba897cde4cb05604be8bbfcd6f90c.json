{"remainingRequest":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/babel-loader/lib/index.js!/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stoneage/vueJs projects/aliceblueTradevuex/src/views/tradingviewChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/src/views/tradingviewChart.vue","mtime":1655307156181},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/babel.config.js","mtime":1649344700943},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/babel-loader/lib/index.js","mtime":1655272566942},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/vue-loader/lib/index.js","mtime":1655272561270}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["tradingviewChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"TVChartContainer\" :id=\"containerId\" />\n</template>\n\n<script>\nimport store from \"../store\";\nimport chart from \"../mixins/chartTicker\";\nimport { widget } from \"../../public/charting_library\";\nimport axios from \"axios\";\nfunction getLanguageFromURL() {\n  const regex = new RegExp(\"[\\\\?&]lang=([^&#]*)\");\n  const results = regex.exec(window.location.search);\n  return results === null\n    ? null\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n/* eslint-disable */\n\nexport default {\n  name: \"TVChartContainer\",\n  props: {\n    symbol: {\n      default: \"NIFTY 50::NSE::Index\",\n      type: String,\n    },\n    interval: {\n      default: \"D\",\n      type: String,\n    },\n    containerId: {\n      default: \"tv_chart_container\",\n      type: String,\n    },\n    datafeedUrl: {\n      default:\"https://a3.aliceblueonline.com/rest/AliceBlueAPIService/chart\",\n      type: String,\n    },\n    libraryPath: {\n      default: \"/charting_library/\",\n      type: String,\n    },\n    chartsStorageUrl: {\n      default: \"https://a3.aliceblueonline.com/rest/AliceBlueAPIService\",\n      type: String,\n    },\n    chartsStorageApiVersion: {\n      default: \"1.1\",\n      type: String,\n    },\n    clientId: {\n      default: \"ALICEBLUE\",\n      type: String,\n    },\n    userId: {\n      default: store.state.authtication.userId,\n      type: String,\n    },\n    fullscreen: {\n      default: false,\n      type: Boolean,\n    },\n    autosize: {\n      default: true,\n      type: Boolean,\n    },\n    studiesOverrides: {\n      type: Object,\n    },\n  },\n  data() {\n    return {\n      customSymbol: \"\",\n    };\n  },\n  created: function () {\n    this.$root.$refs.TVChartContainer = this;\n  },\n  tvWidget: null,\n  mounted() {\n  !localStorage.getItem('tradingview.chart.lastUsedTimeBasedResolution') ? localStorage.setItem(\"tradingview.chart.lastUsedTimeBasedResolution\", \"1D\") : ''\n    let temp ={\n      data: \"initial\",\n       where: 'chart'\n    }\n    this.refresh(temp);\n  },\n  destroyed() {\n    if (this.tvWidget !== null) {\n      this.tvWidget.remove();\n      this.tvWidget = null;\n    }\n  },\n  methods: {\n    createChart(datafeedUrl) {\n      this.feed = this.createFeed(datafeedUrl);\n    },\n    createFeed(datafeedUrl) {\n      let Datafeed = {};\n      Datafeed.DataPulseUpdater = function (datafeed, updateFrequency) {\n        this._datafeed = datafeed;\n        this._subscribers = {};\n        this._requestsPending = 0;\n        var that = this;\n        var update = function () {\n          if (that._requestsPending > 0) {\n            return;\n          }\n          for (var listenerGUID in that._subscribers) {\n            var subscriptionRecord = that._subscribers[listenerGUID];\n            var resolution = subscriptionRecord.resolution;\n            var datesRangeRight = parseInt(\n              (new Date().valueOf() / 1000).toFixed()\n            );\n            //\tBEWARE: please note we really need 2 bars, not the only last one\n            //\tsee the explanation below. `10` is the `large enough` value to work around holidays\n            var datesRangeLeft =\n              datesRangeRight - that.periodLengthSeconds(resolution, 10);\n            that._requestsPending++;\n            (function (_subscriptionRecord) {\n              // eslint-disable-line\n              that._datafeed.getBars(\n                _subscriptionRecord.symbolInfo,\n                resolution,\n                datesRangeLeft,\n                datesRangeRight,\n                function (bars) {\n                  that._requestsPending--;\n                  //\tmeans the subscription was cancelled while waiting for data\n                  if (!that._subscribers.hasOwnProperty(listenerGUID)) {\n                    return;\n                  }\n                  if (bars.length === 0) {\n                    return;\n                  }\n                  var lastBar = bars[bars.length - 1];\n                  if (\n                    !isNaN(_subscriptionRecord.lastBarTime) &&\n                    lastBar.time < _subscriptionRecord.lastBarTime\n                  ) {\n                    return;\n                  }\n                  var subscribers = _subscriptionRecord.listeners;\n                  //\tBEWARE: this one isn't working when first update comes and this update makes a new bar. In this case\n                  //\t_subscriptionRecord.lastBarTime = NaN\n                  var isNewBar =\n                    !isNaN(_subscriptionRecord.lastBarTime) &&\n                    lastBar.time > _subscriptionRecord.lastBarTime;\n                  //\tPulse updating may miss some trades data (ie, if pulse period = 10 secods and new bar is started 5 seconds later after the last update, the\n                  //\told bar's last 5 seconds trades will be lost). Thus, at fist we should broadcast old bar updates when it's ready.\n                  if (isNewBar) {\n                    if (bars.length < 2) {\n                      throw new Error(\n                        \"Not enough bars in history for proper pulse update. Need at least 2.\"\n                      );\n                    }\n                    var previousBar = bars[bars.length - 2];\n                    for (var i = 0; i < subscribers.length; ++i) {\n                      subscribers[i](previousBar);\n                    }\n                  }\n                  _subscriptionRecord.lastBarTime = lastBar.time;\n                  for (var j = 0; j < subscribers.length; ++j) {\n                    subscribers[j](lastBar);\n                  }\n                },\n                //\ton error\n                function () {\n                  that._requestsPending--;\n                }\n              );\n            })(subscriptionRecord);\n          }\n        };\n        if (typeof updateFrequency != \"undefined\" && updateFrequency > 0) {\n          setInterval(update, updateFrequency);\n        }\n      };\n      Datafeed.DataPulseUpdater.prototype.periodLengthSeconds = function (\n        resolution,\n        requiredPeriodsCount\n      ) {\n        var daysCount = 0;\n        if (resolution === \"D\") {\n          daysCount = requiredPeriodsCount;\n        } else if (resolution === \"M\" || resolution === \"1M\") {\n          daysCount = 31 * requiredPeriodsCount;\n        } else if (resolution === \"W\" || resolution === \"1W\") {\n          daysCount = 7 * requiredPeriodsCount;\n        } else {\n          daysCount = (requiredPeriodsCount * resolution) / (24 * 60);\n        }\n        return daysCount * 24 * 60 * 60;\n      };\n      Datafeed.DataPulseUpdater.prototype.subscribeDataListener = function (\n        symbolInfo,\n        resolution,\n        newDataCallback,\n        listenerGUID\n      ) {\n        this._datafeed._logMessage(\"Subscribing \" + listenerGUID);\n        if (!this._subscribers.hasOwnProperty(listenerGUID)) {\n          this._subscribers[listenerGUID] = {\n            symbolInfo: symbolInfo,\n            resolution: resolution,\n            lastBarTime: NaN,\n            listeners: [],\n          };\n        }\n        this._subscribers[listenerGUID].listeners.push(newDataCallback);\n      };\n      Datafeed.DataPulseUpdater.prototype.unsubscribeDataListener = function (\n        listenerGUID\n      ) {\n        this._datafeed._logMessage(\"Unsubscribing \" + listenerGUID);\n        delete this._subscribers[listenerGUID];\n      };\n      Datafeed.Container = function (updateFrequency) {\n        this._configuration = {\n          supports_search: false,\n          supports_group_request: false,\n          supported_resolutions: [\"1\", \"5\", \"15\", \"30\", \"60\", \"1D\", \"1W\", \"1M\"],\n          supports_marks: false,\n          supports_timescale_marks: false,\n        };\n        this._barsPulseUpdater = new Datafeed.DataPulseUpdater(\n          this,\n          updateFrequency || 10 * 1000\n        );\n        // this._quotesPulseUpdater = new Datafeed.QuotesPulseUpdater(this);\n        this._enableLogging = true;\n        this._callbacks = {};\n        this._initializationFinished = true;\n        this._fireEvent(\"initialized\");\n        this._fireEvent(\"configuration_ready\");\n      };\n      Datafeed.Container.prototype._fireEvent = function (event, argument) {\n        if (this._callbacks.hasOwnProperty(event)) {\n          var callbacksChain = this._callbacks[event];\n          for (var i = 0; i < callbacksChain.length; ++i) {\n            callbacksChain[i](argument);\n          }\n          this._callbacks[event] = [];\n        }\n      };\n      Datafeed.Container.prototype._logMessage = function (message) {\n        if (this._enableLogging) {\n          var now = new Date();\n        }\n      };\n      Datafeed.Container.prototype.on = function (event, callback) {\n        if (!this._callbacks.hasOwnProperty(event)) {\n          this._callbacks[event] = [];\n        }\n        this._callbacks[event].push(callback);\n        return this;\n      };\n      Datafeed.Container.prototype.onReady = function (callback) {\n        let that = this;\n        if (this._configuration) {\n          setTimeout(function () {\n            callback(that._configuration);\n          }, 0);\n        } else {\n          this.on(\"configuration_ready\", function () {\n            callback(that._configuration);\n          });\n        }\n      };\n      Datafeed.Container.prototype._symbolResolveURL = \"/symbols\";\n      Datafeed.Container.prototype._prevSymbol = this.customSymbol;\n      Datafeed.Container.prototype.resolveSymbol = function (\n        symbolName,\n        onSymbolResolvedCallback,\n        onResolveErrorCallback\n      ) {\n        this._logMessage(\"GOWNO :: resolve symbol \" + symbolName);\n        this._logMessage(\"GOWNO :: this._prevSymbol \" + this._prevSymbol);\n        if (symbolName && symbolName.split(\"::\").length < 2) {\n          symbolName = this._prevSymbol;\n        }\n        this._send(\n          datafeedUrl + this._symbolResolveURL,\n          {\n            symbol: symbolName ? symbolName.toUpperCase() : \"\",\n          },\n          function (dataObj) {\n            dataObj.full_name = symbolName;\n\n            onSymbolResolvedCallback(dataObj);\n          }\n        );\n        this._prevSymbol = symbolName;\n        localStorage.removeItem(\"_lastBar\");\n        localStorage.removeItem(\"chart_Ticker\");\n      };\n\n      Datafeed.Container.prototype._historyURL = \"/history\";\n      Datafeed.Container.prototype.getBars = function (\n        symbolInfo,\n        resolution,\n        rangeStartDate,\n        rangeEndDate,\n        onDataCallback,\n        onErrorCallback\n      ) {\n        store.commit('setSymbolInfo', symbolInfo)\n        // chart.methods.passData(symbolInfo)\n        localStorage.setItem(\n          \"tradingview.chart.lastUsedTimeBasedResolution\",\n          resolution\n        );\n        if (rangeStartDate > 0 && (rangeStartDate + \"\").length > 10) {\n          throw new Error([\n            \"Got a JS time instead of Unix one.\",\n            rangeStartDate,\n            rangeEndDate,\n          ]);\n        }\n        this._send(\n          datafeedUrl + this._historyURL,\n          {\n            symbol: symbolInfo.ticker || \"\",\n            resolution: resolution,\n            from: rangeStartDate,\n            exchange: symbolInfo.exchange,\n            to: rangeEndDate,\n            user: store.state.authtication.userId,\n          },\n          function (data) {\n            var nodata = data.s === \"no_data\";\n            var bars = [];\n            //\tdata is JSON having format {s: \"status\" (ok, no_data, error),\n            //  v: [volumes], t: [times], o: [opens], h: [highs], l: [lows], c:[closes], nb: \"optional_unixtime_if_no_data\"}\n            var barsCount = nodata ? 0 : data.t.length;\n            var volumePresent = typeof data.v != \"undefined\";\n            var ohlPresent = typeof data.o != \"undefined\";\n            for (var i = 0; i < barsCount; ++i) {\n              var barValue = {\n                time: data.t[i] * 1000,\n                close: data.c[i],\n              };\n              if (ohlPresent) {\n                barValue.open = data.o[i];\n                barValue.high = data.h[i];\n                barValue.low = data.l[i];\n              } else {\n                barValue.open = barValue.high = barValue.low = barValue.close;\n              }\n              if (volumePresent) {\n                barValue.volume = data.v[i];\n              }\n              localStorage.setItem(\"_lastBar\", JSON.stringify(barValue));\n              localStorage.setItem(\"loadChart\", \"true\");\n              bars.push(barValue);\n            }\n            //API call to get scrip quote data\n            if (Object.keys(symbolInfo).length > 0) {\n\n              localStorage.removeItem(\"chart_Ticker\");\n            }\n\n            onDataCallback(bars, {\n              noData: nodata,\n              nextTime: data.nb || data.nextTime,\n            });\n          }\n        );\n      };\n      Datafeed.Container.prototype.subscribeBars = function (\n        symbolInfo,\n        resolution,\n        onRealtimeCallback,\n        listenerGUID,\n        onResetCacheNeededCallback\n      ) {\n        store.commit(\"setChartFeed\", { resolution, onRealtimeCallback });\n        chart.methods.webSocketData(\"\");\n        // if(value !==  \"intial\" && store.state.chartFeed != ''){\n\n        //   // // // this._barsPulseUpdater.subscribeDataListener(symbolInfo, resolution, onRealtimeCallback, listenerGUID, onResetCacheNeededCallback);\n      };\n      Datafeed.Container.prototype.unsubscribeBars = function (listenerGUID) {\n        this._barsPulseUpdater.unsubscribeDataListener(listenerGUID);\n      };\n      Datafeed.Container.prototype._send = function (url, params, callback) {\n        var request = url;\n        if (params) {\n          for (var i = 0; i < Object.keys(params).length; ++i) {\n            var key = Object.keys(params)[i];\n            var value = encodeURIComponent(params[key]);\n            request += (i === 0 ? \"?\" : \"&\") + key + \"=\" + value;\n          }\n        }\n        this._logMessage(\"New request: \" + request);\n        axios\n          .get(request)\n          .then((response) => {\n            callback(response.data);\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      };\n      return new Datafeed.Container();\n    },\n    refresh(item) {\n      \n      var currentChart = \"\";\n      let getLocal = JSON.parse(localStorage.getItem(\"chartData\"))\n      item.data == \"initial\"\n        ? (currentChart = getLocal['data'])\n        : (currentChart = item.data);\n      localStorage.setItem(\"chartData\", JSON.stringify(getLocal));\n        if(!currentChart.chartSymbol.includes('::INDEX')){\n        var temp = {\n          value: currentChart,\n          from: item.where,\n          page: \"chart\",\n          token: currentChart.chartToken,\n          exch : currentChart.chartExchange\n        };\n        this.$store.dispatch(\"orderWindow/getScripQuoteDetails\", temp);\n      }\n this.customSymbol = currentChart.chartSymbol\n      var tempData = {\n        data: [],\n        where: \"chart\",\n        subscribe: currentChart.websocketSub ? currentChart.websocketSub : currentChart.ex + '|' + currentChart.token + '#',\n      };\n      currentChart.chart != '::index' ? this.$store.dispatch(\"wsConnection/websocketSubscription\", tempData) : ''\n      let prevResolution = localStorage.getItem('tradingview.chart.lastUsedTimeBasedResolution')\n      if (item.data == \"initial\") {\n      this.createChart(this.datafeedUrl);\n      const widgetOptions = {\n        symbol: this.customSymbol,\n        // BEWARE: no trailing slash is expected in feed URL\n        datafeed: this.feed,\n        interval: prevResolution ? prevResolution : this.interval,\n        container_id: this.containerId,\n        library_path: this.libraryPath,\n        locale: getLanguageFromURL() || \"en\",\n        disabled_features: [\n          \"use_localstorage_for_settings\",\n          \"header_fullscreen_button\",\n          \"header_compare\",\n          \"header_symbol_search\"\n        ],\n        enabled_features: [\"study_templates\", \"hide_left_toolbar_by_default\"],\n        charts_storage_url: this.chartsStorageUrl,\n        user_id: this.userId,\n        fullscreen: this.fullscreen,\n        autosize: this.autosize,\n        studies_overrides: this.studiesOverrides,\n        timezone: \"Asia/Kolkata\",\n        charts_storage_api_version: this.chartsStorageApiVersion,\n        client_id: this.clientId,\n        auto_save_delay: 5\n      };\n      \n        const tvWidget = new widget(widgetOptions);\n      this.tvWidget = tvWidget;\n    //   tvWidget.onChartReady(function() {\n    // tvWidget.onContextMenu(function(indicators) {\n    //     return [{\n    //         position: \"top\",\n    //         text: indicators,\n    //         click: function() { alert(\"First clicked.\"); }\n    //     },\n    //     { text: \"-\", position: \"top\" },\n    //     { text: \"-Objects Tree...\" },\n    //     {\n    //         position: \"top\",\n    //         text: \"Second top menu item 2\",\n    //         click: function() { alert(\"Second clicked.\"); }\n    //     }, {\n    //         position: \"bottom\",\n    //         text: \"Bottom menu item\",\n    //         click: function() { alert(\"Third clicked.\"); }\n    //     }];\n    // })\n    //   })\n      }else{\n        this.tvWidget.setSymbol(this.customSymbol, this.tvWidget.symbolInterval().interval, function(){})\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.TVChartContainer {\n  height: calc(100vh - 56px);\n}\n</style>"],"sourceRoot":"src/views"}]}