{"remainingRequest":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/babel-loader/lib/index.js!/home/stoneage/vueJs projects/aliceblueTradevuex/src/store/modules/marketWatch.js","dependencies":[{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/src/store/modules/marketWatch.js","mtime":1651728105680},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/babel.config.js","mtime":1649344700943},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/cache-loader/dist/cjs.js","mtime":1655272566310},{"path":"/home/stoneage/vueJs projects/aliceblueTradevuex/node_modules/babel-loader/lib/index.js","mtime":1655272566942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3N0b25lYWdlL3Z1ZUpzIHByb2plY3RzL2FsaWNlYmx1ZVRyYWRldnVleC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvaG9tZS9zdG9uZWFnZS92dWVKcyBwcm9qZWN0cy9hbGljZWJsdWVUcmFkZXZ1ZXgvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanMiOwppbXBvcnQgc2VydmljZSBmcm9tICIuLi9TZXJ2aWNlcy9odHRwc2VydmljZSI7CmltcG9ydCBlcnJvckhhbmRsaW5nIGZyb20gJy4uL1NlcnZpY2VzL2Vycm9ySGFuZGxpbmcnOwppbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL3JvdXRlcic7CnZhciBta1dhdGNoID0gewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIG13R3JvdXBOYW1lczogW10sCiAgICBtd0xpc3Q6IFtdLAogICAgbm9kYXRhOiBmYWxzZSwKICAgIHNlYXJjaExpc3Q6IFtdLAogICAgc2VjdXJpdHlJbmZvRGF0YTogW10sCiAgICBwcmljZVJhZ2VEYXRhOiBbXSwKICAgIGFsZXJ0RGlhbG9nOiBmYWxzZSwKICAgIGxvYWRpbmc6IGZhbHNlLAogICAgYWxlcnRMb2FkZXI6IGZhbHNlLAogICAgZGVwdGhMb2FkZXI6IGZhbHNlLAogICAgYXV0aERpYWxvZzogZmFsc2UKICB9LAogIG11dGF0aW9uczogewogICAgc2V0TXdHcm91cE5hbWVzOiBmdW5jdGlvbiBzZXRNd0dyb3VwTmFtZXMoc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUubXdHcm91cE5hbWVzID0gZGF0YTsKICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ213TGlzdCcsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTsKICAgIH0sCiAgICBzZXRNd2xpc3Q6IGZ1bmN0aW9uIHNldE13bGlzdChzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5td0xpc3QgPSBbXTsKICAgICAgc3RhdGUubXdMaXN0ID0gZGF0YTsKICAgICAgc3RhdGUubXdMaXN0LmZvckVhY2goZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgZWwuQ2hhbmdlID0gJzAuMDAnOwogICAgICAgIGVsLlBlckNoYW5nZSA9ICcwLjAwJzsKICAgICAgICBlbC5jaGFydCA9ICdtdyc7CgogICAgICAgIGlmIChlbC5sdHAgPiAwICYmIGVsLnBkYykgewogICAgICAgICAgZWwuQ2hhbmdlID0gcGFyc2VGbG9hdChlbC5wZGMpIC0gcGFyc2VGbG9hdChlbC5sdHApOwogICAgICAgICAgZWwuUGVyQ2hhbmdlID0gZWwuQ2hhbmdlIC8gMTAwOwogICAgICAgIH0KCiAgICAgICAgZWwuUGVyQ2hhbmdlID0gcGFyc2VGbG9hdChlbC5QZXJDaGFuZ2UpLnRvRml4ZWQoMik7CiAgICAgIH0pOyAvLyB0aGlzLmRpc3BhdGNoKCdtYXJrZXRXYXRjaC9jaGVja1NvY2tldFN0YXR1cycpCiAgICB9LAogICAgc2V0Tm9kYXRhOiBmdW5jdGlvbiBzZXROb2RhdGEoc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUubm9kYXRhID0gZGF0YTsKICAgIH0sCiAgICBzZXRTZWFyY2hMaXN0OiBmdW5jdGlvbiBzZXRTZWFyY2hMaXN0KHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLnNlYXJjaExpc3QgPSBkYXRhOwogICAgfSwKICAgIHNldFNlY3VyaXR5SW5mbzogZnVuY3Rpb24gc2V0U2VjdXJpdHlJbmZvKHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLnNlY3VyaXR5SW5mb0RhdGEgPSBkYXRhOwogICAgfSwKICAgIHNldFByaWNlUmFuZ2U6IGZ1bmN0aW9uIHNldFByaWNlUmFuZ2Uoc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUucHJpY2VSYWdlRGF0YSA9IFtdOwogICAgICBzdGF0ZS5wcmljZVJhZ2VEYXRhID0gZGF0YTsKICAgIH0sCiAgICBzZXRBbGVydERpYWxvZzogZnVuY3Rpb24gc2V0QWxlcnREaWFsb2coc3RhdGUsIGRhdGEpIHsKICAgICAgc3RhdGUuYWxlcnREaWFsb2cgPSBkYXRhOwogICAgfSwKICAgIHNldERlcHRoTG9hZGVyOiBmdW5jdGlvbiBzZXREZXB0aExvYWRlcihzdGF0ZSwgZGF0YSkgewogICAgICBzdGF0ZS5kZXB0aExvYWRlciA9IGRhdGE7CiAgICB9LAogICAgc2V0QXV0aERpYWxvZzogZnVuY3Rpb24gc2V0QXV0aERpYWxvZyhzdGF0ZSwgcGF5bG9hZCkgewogICAgICBzdGF0ZS5hdXRoRGlhbG9nID0gcGF5bG9hZDsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIC8vIGdldCBtYXJrZXR3YXRjaCBuYW1lcwogICAgZ2V0TXdsaXN0TmFtZXM6IGZ1bmN0aW9uIGdldE13bGlzdE5hbWVzKF9yZWYpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0LCBzdGF0ZSwgcm9vdEdldHRlcnMsIGRpc3BhdGNoLCBqc29uOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0LCBzdGF0ZSA9IF9yZWYuc3RhdGUsIHJvb3RHZXR0ZXJzID0gX3JlZi5yb290R2V0dGVycywgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoOwogICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBqc29uID0gewogICAgICAgICAgICAgICAgICB1c2VySWQ6IHJvb3RHZXR0ZXJzWydhdXRodGljYXRpb24vZ2V0VXNlcklkJ10KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmZldGNoTVdMaXN0KGpzb24pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVtc2cgPT0gIlNlc3Npb24gRXhwaXJlZCIpIHsKICAgICAgICAgICAgICAgICAgICByb3V0ZXIuY3VycmVudFJvdXRlLnBhdGggPT0gJy8nID8gZXJyb3JIYW5kbGluZy5sb2NhbENsZWFyKCkgOiBlcnJvckhhbmRsaW5nLnNlc3Npb25FeHBpcmUoKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwICYmIHJlc3BvbnNlLmRhdGEuc3RhdCA9PSAiT2siKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJvb3RHZXR0ZXJzWydnZXRTc29UeXBlJ10gPT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCduZXdNYXJrZXRXYXRjaCcsIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVzZXJJZCI6IHJvb3RHZXR0ZXJzWydhdXRodGljYXRpb24vZ2V0VXNlcklkJ10KICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyAgZGlzcGF0Y2goJ3dzQ29ubmVjdGlvbi9pblZhbGlkYXRlU2Vzc2lvbicsICcnICwgeyByb290OnRydWUgfSkKICAgICAgICAgICAgICAgICAgICAgIC8vICBkaXNwYXRjaCgnd3NDb25uZWN0aW9uL2NyZWF0ZVNlc3Npb24nLCAnJyAsIHsgcm9vdDp0cnVlIH0pCiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAocmVzcG9uc2UuZGF0YS52YWx1ZXMubGVuZ3RoID09IDUpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBjb21taXQoInNldE13R3JvdXBOYW1lcyIsIHJlc3BvbnNlLmRhdGEudmFsdWVzKTsKICAgICAgICAgICAgICAgICAgICAgIC8vICAgICByb3V0ZXIuY3VycmVudFJvdXRlLnBhdGggPT0gJy8nID8gcm91dGVyLnB1c2goJy9ob21lJykuY2F0Y2goKCk9PiB7fSkgOiAnJwogICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBkaXNwYXRjaCgiYXV0b0dlbmVyYXRlTVciLCByZXNwb25zZS5kYXRhLnZhbHVlcyk7CiAgICAgICAgICAgICAgICAgICAgICAvLyB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdhdXRodGljYXRpb24vZ2VuZXJhdGVBdXRoQ29kZScsIHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAib3JkZXJzIgogICAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgcm91dGVyLmN1cnJlbnRSb3V0ZS5wYXRoID09ICcvJyA/IGVycm9ySGFuZGxpbmcubG9jYWxDbGVhcigpIDogZXJyb3JIYW5kbGluZy5lcnJMb2coZXJyKTsKICAgICAgICAgICAgICAgIH0pWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIGZldGNoIGN1cnJlbnQgbWFya2V0d2F0Y2ggbGlzdAogICAgZmV0Y2hNd0xpc3RzOiBmdW5jdGlvbiBmZXRjaE13TGlzdHMoX3JlZjIsIHBheWxvYWQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgc3RhdGUsIGRpc3BhdGNoOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQsIHN0YXRlID0gX3JlZjIuc3RhdGUsIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmZldGNoTVdTY3JpcExpc3QocGF5bG9hZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YS5zdGF0ID09ICJPayIgJiYgcmVzcG9uc2UuZGF0YS52YWx1ZXNbMF0gIT09ICJObyBNYXJrZXQgV2F0Y2giKSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXROb2RhdGEnLCBmYWxzZSk7IC8vIGNoZWNrIHVud2FudGVkIHNjcmlwcyAKCiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdW53YW50ZWQgc2NyaXBzIAogICAgICAgICAgICAgICAgICAgIHZhciBtd0RhdGEgPSBbXTsKICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgICAgICAgZWwudm9sdW1lID0gJycsIGVsLmNoYXJ0ID0gJ213JzsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAoZWwuRXhjaGFuZ2UgIT0gJ1gnICYmIGVsLnRva2VuICE9ICcxMDAnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG13RGF0YS5wdXNoKGVsKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKG13RGF0YS5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXROb2RhdGEnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0TXdsaXN0JywgW10pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBEYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgZGF0YTogbXdEYXRhLAogICAgICAgICAgICAgICAgICAgICAgd2hlcmU6ICdta1dhdGNoJwogICAgICAgICAgICAgICAgICAgIH07IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAgICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdjb21tb24vZm9ybWF0U2NyaXAnLCB0ZW1wRGF0YSwgewogICAgICAgICAgICAgICAgICAgICAgcm9vdDogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAnTm90IGFibGUgdG8gUmV0cmlldmUgTWFya2V0V2F0Y2ggJyB8fCByZXNwb25zZS5kYXRhLmVtc2cgPT0gJ05vdCBhYmxlIHRvIFJldHJpZXZlIE1hcmtldFdhdGNoJyB8fCByZXNwb25zZS5kYXRhLnZhbHVlc1swXSA9PSAiTm8gTWFya2V0IFdhdGNoIikgewogICAgICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0Tm9kYXRhJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXRNd2xpc3QnLCBbXSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCdzZXROb2RhdGEnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldE13bGlzdCcsIFtdKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLmVyckxvZyhlcnIpOwogICAgICAgICAgICAgICAgfSlbImZpbmFsbHkiXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyBhdXRvZ2VuZXJhdGUgbWFya2V0d2F0Y2ggbmFtZXMKICAgIGF1dG9HZW5lcmF0ZU1XOiBmdW5jdGlvbiBhdXRvR2VuZXJhdGVNVyhfcmVmMywgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgY29tbWl0LCBtd05hbWUsIHRlbXBNd05hbWUsIHJhbmRvbU51bWJlciwgYWxwaGEsIHRlbXA7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICAgIG13TmFtZSA9ICJtd0dycCI7CiAgICAgICAgICAgICAgICB0ZW1wTXdOYW1lID0gcGF5bG9hZDsKCiAgICAgICAgICAgICAgICB3aGlsZSAocGF5bG9hZC5sZW5ndGggIT0gNSAmJiBwYXlsb2FkLmxlbmd0aCA8PSA1KSB7CiAgICAgICAgICAgICAgICAgIHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1KTsKICAgICAgICAgICAgICAgICAgYWxwaGEgPSBbImEiLCAiYiIsICJjIiwgImQiLCAiZSIsICJmIiwgImciLCAiaCIsICJpIiwgImoiLCAiayIsICJsIiwgIm0iLCAibiIsICJvIiwgInAiLCAicSIsICJyIiwgInMiLCAidCIsICJ1IiwgInYiLCAidyIsICJ4IiwgInkiLCAieiJdOwogICAgICAgICAgICAgICAgICB0ZW1wID0gbXdOYW1lICsgYWxwaGFbcmFuZG9tTnVtYmVyXTsKICAgICAgICAgICAgICAgICAgbXdOYW1lICs9IGFscGhhW3JhbmRvbU51bWJlcl07CiAgICAgICAgICAgICAgICAgIHBheWxvYWQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICE9IHRlbXApIHsKICAgICAgICAgICAgICAgICAgICAgIG13TmFtZSA9IHRlbXA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgdGVtcE13TmFtZS5wdXNoKG13TmFtZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBNd05hbWU7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0My50MSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgKDAsIF9jb250ZXh0My50MCkoInNldE13R3JvdXBOYW1lcyIsIF9jb250ZXh0My50MSk7CiAgICAgICAgICAgICAgICByb3V0ZXIuY3VycmVudFJvdXRlLnBhdGggPT0gJy8nID8gcm91dGVyLnB1c2goJy9ob21lJylbImNhdGNoIl0oZnVuY3Rpb24gKCkge30pIDogJyc7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyBzZWFyY2ggc2NyaXAgbGlzdAogICAgZ2V0U2VhcmNoU2NyaXB0czogZnVuY3Rpb24gZ2V0U2VhcmNoU2NyaXB0cyhfcmVmNCwgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdCwganNvbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNC5zdGF0ZSwgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBqc29uID0gewogICAgICAgICAgICAgICAgICBleGNoYW5nZTogWyJBbGwiLCAiQ0RTIiwgIk1DWCIsICJORk8iLCAiTlNFIiwgIkJTRSJdLAogICAgICAgICAgICAgICAgICBzeW1ib2w6IHBheWxvYWQgPyBwYXlsb2FkLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKSA6ICcnCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZ2V0U2VhcmNoU2NyaXAoanNvbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmZvckVhY2goZnVuY3Rpb24gKHNlYXJjaERhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm13TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChtd0xpc3REYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtd0xpc3REYXRhWyJ0b2tlbiJdID09IHNlYXJjaERhdGFbInRva2VuIl0gJiYgbXdMaXN0RGF0YVsiRXhjaGFuZ2UiXSAhPSAiWCIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoRGF0YVsiY2hlY2tlZCJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCJzZXRTZWFyY2hMaXN0IiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0ID09ICJOb3RfT2siICYmIHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuZXJyTG9nKGVycik7CiAgICAgICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIGFkZFNjcmlwIGluIG1rV2F0Y2gKICAgIGFkZFNjcmlwTGlzdDogZnVuY3Rpb24gYWRkU2NyaXBMaXN0KF9yZWY1LCBwYXlsb2FkKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgICAgIHZhciBzdGF0ZSwgZGlzcGF0Y2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjUuc3RhdGUsIGRpc3BhdGNoID0gX3JlZjUuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICBpZiAoIShzdGF0ZS5td0xpc3QubGVuZ3RoID4gMTkpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy50b2FzdGVyKCcnLCAnaW5mbycsICJDYW4ndCBhZGQgbW9yZSB0aGFuIDIwIHNjcmlwcy5Vc2UgYW5vdGhlciB0YWIiLCAzMDAwKTsKICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmFkZE5ld013U2NyaXAocGF5bG9hZC5hZGREZWwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwICYmIHJlc3BvbnNlLmRhdGEuc3RhdCA9PSAiT2siKSB7CiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZC5kYXRhWyJjaGVja2VkIl0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdnZXROZXdNd1NjcmlwTGlzdCcsIHBheWxvYWQuZmV0Y2hNdyk7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy50b2FzdGVyKCcnLCAnc3VjY2VzcycsICdTY3JpcCBhZGRlZCBzdWNjZXNzZnVsbHknLCA1MDApOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZS5pbmNsdWRlcygnU3ltYm9sIGFscmVhZHkgZXhpeHRzJykpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnRvYXN0ZXIoJycsICdpbmZvJywgJ1NjcmlwIGlzIGFscmVhZHkgcHJlc2VudCBpbiBjdXJyZW50VGFiJywgMzAwMCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5lbXNnID09ICJTZXNzaW9uIEV4cGlyZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5zZXNzaW9uRXhwaXJlKCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5zdGF0ID09ICJub3RfT2siICYmIHJlc3BvbnNlLmRhdGEubWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcudG9hc3RlcignJywgJ2RhbmdlcicsIHJlc3BvbnNlLmRhdGEubWVzc2FnZSwgNTAwMCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5lcnJMb2coZXJyKTsKICAgICAgICAgICAgICAgIH0pWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vIGRlbGV0ZVNjcmlwIGluIG1rV2F0Y2gKICAgIGRlbGV0ZVNjcmlwRnJvbUxpc3Q6IGZ1bmN0aW9uIGRlbGV0ZVNjcmlwRnJvbUxpc3QoX3JlZjYsIHBheWxvYWQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBkaXNwYXRjaDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNi5zdGF0ZSwgZGlzcGF0Y2ggPSBfcmVmNi5kaXNwYXRjaDsKICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZGVsZXRlTXdTY3JpcChwYXlsb2FkLmFkZERlbCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YS5zdGF0ID09ICJPayIpIHsKICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLmRhdGFbImNoZWNrZWQiXSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdnZXROZXdNd1NjcmlwTGlzdCcsIHBheWxvYWQuZmV0Y2hNdyk7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy50b2FzdGVyKCcnLCAnaW5mbycsICdTY3JpcCBkZWxldGVkIHN1Y2Nlc3NmdWxseScsIDUwMCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UuZGF0YS5lbXNnID09ICdOb3QgYWJsZSB0byBSZXRyaWV2ZSBNYXJrZXRXYXRjaCAnIHx8IHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAnTm90IGFibGUgdG8gUmV0cmlldmUgTWFya2V0V2F0Y2gnIHx8IHJlc3BvbnNlLmRhdGEudmFsdWVzWzBdID09ICJObyBNYXJrZXQgV2F0Y2giKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy50b2FzdGVyKCcnLCAnZGFuZ2VyJywgcmVzcG9uc2UuZGF0YS5lbXNnLCA1MDApOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuZW1zZyA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdCA9PSAibm90X09rIiAmJiByZXNwb25zZS5kYXRhLm1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnRvYXN0ZXIoJycsICdkYW5nZXInLCByZXNwb25zZS5kYXRhLm1lc3NhZ2UsIDUwMDApOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuZXJyTG9nKGVycik7CiAgICAgICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vc2VjdXJpdHlJbmZvCiAgICBnZXRTZWN1cml0eUluZm86IGZ1bmN0aW9uIGdldFNlY3VyaXR5SW5mbyhfcmVmNywgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNygpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgc3RhdGUsIGpzb247CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY3LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmNy5yb290R2V0dGVycywgc3RhdGUgPSBfcmVmNy5zdGF0ZTsKICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAganNvbiA9IHsKICAgICAgICAgICAgICAgICAgImV4Y2giOiBwYXlsb2FkLmV4LAogICAgICAgICAgICAgICAgICAic3ltYm9sIjogcGF5bG9hZC50b2tlbiwKICAgICAgICAgICAgICAgICAgInVzZXJJZCI6IHJvb3RHZXR0ZXJzWydhdXRodGljYXRpb24vZ2V0VXNlcklkJ10sCiAgICAgICAgICAgICAgICAgICJ1c2VyU2Vzc2lvbklEIjogcm9vdEdldHRlcnNbJ2F1dGh0aWNhdGlvbi9nZXRVc2VyU2Vzc2lvbiddCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZ2V0U2VjdXJpdHlJbmZvRGVwdGhJbmZvKGpzb24pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwICYmIHJlc3BvbnNlLmRhdGEgIT0gIk5vdF9PayIpIHsKICAgICAgICAgICAgICAgICAgICBjb21taXQoInNldFNlY3VyaXR5SW5mbyIsIHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdCA9PSAiTm90X09rIiAmJiByZXNwb25zZS5kYXRhLmVtc2cgPT0gIlNlc3Npb24gRXhwaXJlZCIpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnNlc3Npb25FeHBpcmUoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLmVyckxvZyhlcnIpOwogICAgICAgICAgICAgICAgfSlbImZpbmFsbHkiXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICAvLyBnZXQgZ2V0TmV3UHJpY2VSYW5nZQogICAgZ2V0TmV3UHJpY2VSYW5nZTogZnVuY3Rpb24gZ2V0TmV3UHJpY2VSYW5nZShfcmVmOCwgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOCgpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgc3RhdGUsIGpzb247CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY4LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmOC5yb290R2V0dGVycywgc3RhdGUgPSBfcmVmOC5zdGF0ZTsKICAgICAgICAgICAgICAgIGpzb24gPSB7CiAgICAgICAgICAgICAgICAgICJleGNoIjogcGF5bG9hZC5leC50b1VwcGVyQ2FzZSgpLAogICAgICAgICAgICAgICAgICAic3ltYm9sIjogcGF5bG9hZC50b2tlbiwKICAgICAgICAgICAgICAgICAgInVzZXJJZCI6IHJvb3RHZXR0ZXJzWydhdXRodGljYXRpb24vZ2V0VXNlcklkJ10sCiAgICAgICAgICAgICAgICAgICJ1c2VyU2Vzc2lvbklEIjogcm9vdEdldHRlcnNbJ2F1dGh0aWNhdGlvbi9nZXRVc2VyU2Vzc2lvbiddCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZ2V0UHJpY2VSYW5nZShqc29uKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lbXNnID09ICJTZXNzaW9uIEV4cGlyZWQiKSB7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5zZXNzaW9uRXhwaXJlKCk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCAmJiByZXNwb25zZS5kYXRhICE9ICJOb3RfT2siKSB7CiAgICAgICAgICAgICAgICAgICAgY29tbWl0KCJzZXRQcmljZVJhbmdlIiwgcmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGluZy5lcnJMb2coZXJyKTsKICAgICAgICAgICAgICAgIH0pWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBjb21taXQoInNldERlcHRoTG9hZGVyIiwgZmFsc2UpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOCk7CiAgICAgIH0pKSgpOwogICAgfSwKCiAgICAvKioKICAgICAqIEBhdXRob3IgU2VudGhpbAogICAgICogQGRhdGUgMDItMTItMjAyMSAKICAgICAqIEBtZXRob2QgU29ydGluZyBNa1dhdGNoIGxpc3QKICAgICAqLwogICAgc29ydExpc3Q6IGZ1bmN0aW9uIHNvcnRMaXN0KF9yZWY5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU5KCkgewogICAgICAgIHZhciBzdGF0ZSwgcm9vdEdldHRlcnMsIHNvcnRBcnJheSwgdGFiSW5kZXgsIG13bmFtZSwgX2l0ZXJhdG9yLCBfc3RlcCwgaSwgdGVtcCwgZ2V0U29ydE9iajsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjkuc3RhdGUsIHJvb3RHZXR0ZXJzID0gX3JlZjkucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICBzb3J0QXJyYXkgPSBbXTsKICAgICAgICAgICAgICAgIHRhYkluZGV4ID0gcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oInRhYkluZGV4IikpOwogICAgICAgICAgICAgICAgbXduYW1lID0gc3RhdGUubXdHcm91cE5hbWVzW3RhYkluZGV4XVsnbWFrZXRXYXRjaElkJ107CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihzdGF0ZS5td0xpc3QpOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgaSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIHRlbXAgPSB7CiAgICAgICAgICAgICAgICAgICAgICBleGNoOiBpLmV4LAogICAgICAgICAgICAgICAgICAgICAgdG9rZW46IGkudG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICBzb3J0aW5nT3JkZXI6IHN0YXRlLm13TGlzdC5pbmRleE9mKGkpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBzb3J0QXJyYXkucHVzaCh0ZW1wKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGdldFNvcnRPYmogPSB7CiAgICAgICAgICAgICAgICAgIG13SWQ6IG13bmFtZSwKICAgICAgICAgICAgICAgICAgdXNlcklkOiByb290R2V0dGVyc1snYXV0aHRpY2F0aW9uL2dldFVzZXJJZCddLAogICAgICAgICAgICAgICAgICBzY3JpcERhdGE6IHNvcnRBcnJheQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLm5ld1NvcnRTY3JpcChnZXRTb3J0T2JqKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YVsic3RhdCJdID09ICJOb3RfT2siICYmIHJlc3BvbnNlLmRhdGFbImVtc2ciXSA9PSAiU2Vzc2lvbiBFeHBpcmVkIikgewogICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuc2Vzc2lvbkV4cGlyZSgpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxpbmcuZXJyTG9nKGVycik7CiAgICAgICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5KTsKICAgICAgfSkpKCk7CiAgICB9LAoKICAgIC8qKgogICAgICogQGF1dGhvciBBc2h3aW4KICAgICAqIEBkYXRlIDA5LTEyLTIwMjEgCiAgICAgKiBAbWV0aG9kIEFsZXJ0IGRpYWxvZyBCb3gKICAgICAqLwogICAgYWxlcnREaWFsb2c6IGZ1bmN0aW9uIGFsZXJ0RGlhbG9nKF9yZWYxMCwgcGF5bG9hZCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTAoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBjb21taXQsIGpzb247CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYxMC5zdGF0ZSwgY29tbWl0ID0gX3JlZjEwLmNvbW1pdDsKICAgICAgICAgICAgICAgIHN0YXRlLmFsZXJ0TG9hZGVyID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGpzb24gPSB7CiAgICAgICAgICAgICAgICAgIGV4Y2g6IHBheWxvYWQuZGF0YS5leCwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHBheWxvYWQuZGF0YS50b2tlbiwKICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBwYXlsb2FkLmFsZXJ0UHJpY2UgPD0gcGF5bG9hZC5kYXRhLmx0cCA/ICJsIiA6ICJnIiwKICAgICAgICAgICAgICAgICAgc3ltYm9sOiBwYXlsb2FkLmRhdGEudG9rZW4KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2Uuc2Vjcml0eUFsZXJ0VHJhZGUoanNvbikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuYWxlcnRMb2FkZXIgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwICYmIHJlc3BvbnNlLmRhdGEgIT0gIk5vdF9PayIpIHsKICAgICAgICAgICAgICAgICAgICBjb21taXQoJ3NldEFsZXJ0RGlhbG9nJywgZmFsc2UpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuc3RhdCA9PSAiTm90X09rIiAmJiByZXNwb25zZS5kYXRhLmVtc2cgPT0gIlNlc3Npb24gRXhwaXJlZCIpIHsKICAgICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLnNlc3Npb25FeHBpcmUoKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICBlcnJvckhhbmRsaW5nLmVyckxvZyhlcnIpOwogICAgICAgICAgICAgICAgfSlbImZpbmFsbHkiXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGNoZWNrU29ja2V0U3RhdHVzOiBmdW5jdGlvbiBjaGVja1NvY2tldFN0YXR1cyhfcmVmMTEsIHBheWxvYWQpIHsKICAgICAgdmFyIHN0YXRlID0gX3JlZjExLnN0YXRlLAogICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmMTEucm9vdEdldHRlcnMsCiAgICAgICAgICBkaXNwYXRjaCA9IF9yZWYxMS5kaXNwYXRjaDsKCiAgICAgIGlmIChyb290R2V0dGVyc1snd3NDb25uZWN0aW9uL2dldENvbm5lY3Rpb25TdGF0dWUnXSkgewogICAgICAgIHZhciB0ZW1wRGF0YSA9IHsKICAgICAgICAgIGRhdGE6IHN0YXRlLm13TGlzdCwKICAgICAgICAgIHdoZXJlOiAnbWtXYXRjaCcKICAgICAgICB9OwogICAgICAgIGRpc3BhdGNoKCJ3c0Nvbm5lY3Rpb24vd2Vic29ja2V0U3Vic2NyaXB0aW9uIiwgdGVtcERhdGEsIHsKICAgICAgICAgIHJvb3Q6IHRydWUKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIG5ld01hcmtldFdhdGNoOiBmdW5jdGlvbiBuZXdNYXJrZXRXYXRjaChfcmVmMTIsIHBheWxvYWQpIHsKICAgICAgdmFyIHN0YXRlID0gX3JlZjEyLnN0YXRlLAogICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmMTIucm9vdEdldHRlcnMsCiAgICAgICAgICBkaXNwYXRjaCA9IF9yZWYxMi5kaXNwYXRjaCwKICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMi5jb21taXQ7CiAgICAgIHNlcnZpY2UubmV3TXdMaXN0KHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgICBpZiAocmVzcC5zdGF0dXMgPT0gMjAwICYmIHJlc3AuZGF0YS5zdGF0ID09ICdub3RfT2snKSB7CiAgICAgICAgICBkaXNwYXRjaCgnZ2VuZXJhdGVNd05hbWUnLCBwYXlsb2FkKTsKICAgICAgICB9IGVsc2UgaWYgKHJlc3Auc3RhdHVzID09IDIwMCAmJiByZXNwLmRhdGEuc3RhdCA9PSAnT2snICYmIHJlc3AuZGF0YS5yZXN1bHQgJiYgcmVzcC5kYXRhLm1lc3NhZ2UgPT0gJ1N1Y2Nlc3MnKSB7CiAgICAgICAgICAvLyBkaXNwYXRjaCgnd3NDb25uZWN0aW9uL2luVmFsaWRhdGVTZXNzaW9uJywgJ2luaXRpYWwnICwgeyByb290OnRydWUgfSkKICAgICAgICAgIHZhciBqc29uID0gewogICAgICAgICAgICB1c2VySWQ6IHBheWxvYWQudXNlcklkLAogICAgICAgICAgICBtd0lkOiByZXNwLmRhdGEucmVzdWx0WzBdWydtYWtldFdhdGNoSWQnXQogICAgICAgICAgfTsKICAgICAgICAgIGNvbW1pdCgnc2V0TXdHcm91cE5hbWVzJywgcmVzcC5kYXRhLnJlc3VsdCk7CiAgICAgICAgICBkaXNwYXRjaCgnZ2V0TmV3TXdTY3JpcExpc3QnLCBqc29uKTsKICAgICAgICAgIHJvdXRlci5wdXNoKCcvaG9tZScpWyJjYXRjaCJdKGZ1bmN0aW9uICgpIHt9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdlbmVyYXRlTXdOYW1lOiBmdW5jdGlvbiBnZW5lcmF0ZU13TmFtZShfcmVmMTMsIHBheWxvYWQpIHsKICAgICAgdmFyIHN0YXRlID0gX3JlZjEzLnN0YXRlLAogICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmMTMucm9vdEdldHRlcnMsCiAgICAgICAgICBkaXNwYXRjaCA9IF9yZWYxMy5kaXNwYXRjaCwKICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMy5jb21taXQ7CiAgICAgIHNlcnZpY2UubmV3R2VuTXdOYW1lKHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgJiYgcmVzcG9uc2UuZGF0YS5zdGF0ID09ICdPaycgJiYgcmVzcG9uc2UuZGF0YS5tZXNzYWdlID09ICdNYXJrZXQgV2F0Y2ggQ3JlYXRlZCBTdWNjZXNzZnVsbHknKSB7CiAgICAgICAgICBkaXNwYXRjaCgnbmV3TWFya2V0V2F0Y2gnLCBwYXlsb2FkKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGdldE5ld013U2NyaXBMaXN0OiBmdW5jdGlvbiBnZXROZXdNd1NjcmlwTGlzdChfcmVmMTQsIHBheWxvYWQpIHsKICAgICAgdmFyIHN0YXRlID0gX3JlZjE0LnN0YXRlLAogICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmMTQucm9vdEdldHRlcnMsCiAgICAgICAgICBkaXNwYXRjaCA9IF9yZWYxNC5kaXNwYXRjaCwKICAgICAgICAgIGNvbW1pdCA9IF9yZWYxNC5jb21taXQ7CiAgICAgIHNlcnZpY2UuZ2V0TmV3TXdTY3JpcHMocGF5bG9hZCkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgIGlmIChyZXNwLnN0YXR1cyA9PSAyMDAgJiYgcmVzcC5kYXRhLnN0YXQgPT0gJ25vdF9PaycgJiYgcmVzcC5kYXRhLm1lc3NhZ2UgPT0gJ05vIERhdGEnKSB7CiAgICAgICAgICBjb21taXQoJ3NldE5vZGF0YScsIHRydWUpOwogICAgICAgICAgY29tbWl0KCdzZXRNd2xpc3QnLCBbXSk7CiAgICAgICAgfSBlbHNlIGlmIChyZXNwLnN0YXR1cyA9PSAyMDAgJiYgcmVzcC5kYXRhLnN0YXQgPT0gJ09rJyAmJiByZXNwLmRhdGEubWVzc2FnZSA9PSAnU3VjY2VzcycpIHsKICAgICAgICAgIGNvbW1pdCgnc2V0Tm9kYXRhJywgZmFsc2UpOwogICAgICAgICAgY29tbWl0KCdzZXRNd2xpc3QnLCByZXNwLmRhdGEucmVzdWx0KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgZ2V0dGVyczogewogICAgZ2V0QWxlcnREaWFsb2c6IGZ1bmN0aW9uIGdldEFsZXJ0RGlhbG9nKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5hbGVydERpYWxvZzsKICAgIH0sCiAgICBnZXRNd0xpc3Q6IGZ1bmN0aW9uIGdldE13TGlzdChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUubXdMaXN0OwogICAgfSwKICAgIGdldERlcHRoTGlzdDogZnVuY3Rpb24gZ2V0RGVwdGhMaXN0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5wcmljZVJhZ2VEYXRhOwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgbWtXYXRjaDs="},{"version":3,"sources":["/home/stoneage/vueJs projects/aliceblueTradevuex/src/store/modules/marketWatch.js"],"names":["service","errorHandling","router","mkWatch","namespaced","state","mwGroupNames","mwList","nodata","searchList","securityInfoData","priceRageData","alertDialog","loading","alertLoader","depthLoader","authDialog","mutations","setMwGroupNames","data","localStorage","setItem","JSON","stringify","setMwlist","forEach","el","Change","PerChange","chart","ltp","pdc","parseFloat","toFixed","setNodata","setSearchList","setSecurityInfo","setPriceRange","setAlertDialog","setDepthLoader","setAuthDialog","payload","actions","getMwlistNames","commit","rootGetters","dispatch","json","userId","fetchMWList","then","response","emsg","currentRoute","path","localClear","sessionExpire","status","stat","url","root","err","errLog","fetchMwLists","fetchMWScripList","values","mwData","volume","Exchange","token","push","length","tempData","where","autoGenerateMW","mwName","tempMwName","randomNumber","Math","floor","random","alpha","temp","element","getSearchScripts","exchange","symbol","toString","toUpperCase","getSearchScrip","searchData","mwListData","addScripList","toaster","addNewMwScrip","addDel","fetchMw","message","includes","deleteScripFromList","deleteMwScrip","getSecurityInfo","ex","getSecurityInfoDepthInfo","getNewPriceRange","getPriceRange","sortList","sortArray","tabIndex","parseInt","getItem","mwname","i","exch","sortingOrder","indexOf","getSortObj","mwId","scripData","newSortScrip","value","direction","alertPrice","secrityAlertTrade","checkSocketStatus","newMarketWatch","newMwList","resp","result","generateMwName","newGenMwName","getNewMwScripList","getNewMwScrips","getters","getAlertDialog","getMwList","getDepthList"],"mappings":"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","sourcesContent":["import service from \"../Services/httpservice\"\nimport errorHandling from '../Services/errorHandling';\nimport router from '../../router'\n\nconst mkWatch = {\n    namespaced: true,\n\n    state: {\n        mwGroupNames: [],\n        mwList: [],\n        nodata: false,\n        searchList: [],\n        securityInfoData: [],\n        priceRageData: [],\n        alertDialog:false,\n        loading: false,\n        alertLoader: false,\n        depthLoader:false,\n        authDialog: false,\n    },\n\n    mutations: {\n        setMwGroupNames(state, data) {\n            state.mwGroupNames = data;\n            localStorage.setItem('mwList', JSON.stringify(data))\n        },\n        setMwlist(state ,data) {\n            state.mwList = []\n            state.mwList = data\n            state.mwList.forEach(el =>{\n                \n                el.Change = '0.00'\n                el.PerChange = '0.00'\n                el.chart = 'mw'\n                \n                if(el.ltp > 0 && el.pdc){\n                    el.Change = parseFloat(el.pdc) - parseFloat(el.ltp)\n                    el.PerChange = el.Change / 100\n                }\n                el.PerChange = parseFloat(el.PerChange).toFixed(2)\n            })\n            // this.dispatch('marketWatch/checkSocketStatus')\n        },\n        setNodata(state, data) {\n            state.nodata = data;\n        },\n        setSearchList(state, data) {\n            state.searchList = data;\n        },\n        setSecurityInfo(state, data) {\n            state.securityInfoData = data;\n        },\n        setPriceRange(state, data) {\n            state.priceRageData = [];\n            state.priceRageData = data;\n        },\n        setAlertDialog(state, data){\n            state.alertDialog = data;\n        },\n        setDepthLoader(state, data) {\n            state.depthLoader = data;\n        },\n        setAuthDialog(state, payload){\n            state.authDialog = payload\n        }\n    },\n\n    actions: {\n        // get marketwatch names\n        async getMwlistNames({ commit, state, rootGetters, dispatch }) {\n            state.loading = true;\n            let json = {\n                userId: rootGetters['authtication/getUserId']\n            };\n            await service.fetchMWList(json).then(response => {\n                if (response.data.emsg == \"Session Expired\") {\n                    router.currentRoute.path == '/' ? errorHandling.localClear() : errorHandling.sessionExpire();\n                }else if (response.status == 200 && response.data.stat == \"Ok\") {\n                    if(rootGetters['getSsoType'] == ''){\n\n                        dispatch('newMarketWatch', {\"userId\": rootGetters['authtication/getUserId']})\n                //  dispatch('wsConnection/inValidateSession', '' , { root:true })\n                //  dispatch('wsConnection/createSession', '' , { root:true })\n                    // if (response.data.values.length == 5) {\n                    //     commit(\"setMwGroupNames\", response.data.values);\n                    //     router.currentRoute.path == '/' ? router.push('/home').catch(()=> {}) : ''\n                    // } else {\n                    //     dispatch(\"autoGenerateMW\", response.data.values);\n                    // }\n                }else{\n                    dispatch('authtication/generateAuthCode', { url: \"orders\" }, {root: true}) \n                }\n                }\n            }, (err) => {\n                router.currentRoute.path == '/' ? errorHandling.localClear() : errorHandling.errLog(err);\n                \n            }).finally(() => { state.loading = false; })\n        },\n\n        // fetch current marketwatch list\n        async fetchMwLists({ commit, state, dispatch }, payload) {\n            state.loading = true;\n            await service.fetchMWScripList(payload).then(response => {\n                if (response.data.emsg == \"Session Expired\") {\n                    errorHandling.sessionExpire();\n                }else if (response.status == 200 && response.data.stat == \"Ok\" && response.data.values[0] !== \"No Market Watch\") {\n                    commit('setNodata', false)\n                    \n                    // check unwanted scrips \n                    var mwData = []\n                    response.data.values.forEach(el => {\n                        el.volume = '',\n                        el.chart = 'mw'\n                        if (el.Exchange != 'X' && el.token != '100' ) {\n                            mwData.push(el)\n                        }\n                    })\n                    if(mwData.length == 0) { \n                      commit('setNodata', true)\n                      commit('setMwlist', [])\n                    }\n                    var tempData = {\n                        data: mwData,\n                        where: 'mkWatch'\n                    }\n                    // ----------------------------------------------\n                    dispatch('common/formatScrip' , tempData , { root: true })\n                } else if (response.data.emsg == 'Not able to Retrieve MarketWatch ' || response.data.emsg == 'Not able to Retrieve MarketWatch'\n                           || response.data.values[0] == \"No Market Watch\") {\n                    commit('setNodata', true)\n                    commit('setMwlist', [])\n                }\n                else {\n                    commit('setNodata', true)\n                    commit('setMwlist', [])\n                }\n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { \n                state.loading = false \n            })\n        },\n\n        // autogenerate marketwatch names\n        async autoGenerateMW({ commit }, payload) {\n            var mwName = \"mwGrp\";\n            var tempMwName = payload\n            while (payload.length != 5 && payload.length <= 5) {\n                var randomNumber = Math.floor(Math.random() * 25);\n                var alpha = [\n                    \"a\",\n                    \"b\",\n                    \"c\",\n                    \"d\",\n                    \"e\",\n                    \"f\",\n                    \"g\",\n                    \"h\",\n                    \"i\",\n                    \"j\",\n                    \"k\",\n                    \"l\",\n                    \"m\",\n                    \"n\",\n                    \"o\",\n                    \"p\",\n                    \"q\",\n                    \"r\",\n                    \"s\",\n                    \"t\",\n                    \"u\",\n                    \"v\",\n                    \"w\",\n                    \"x\",\n                    \"y\",\n                    \"z\"\n                ];\n                var temp = mwName + alpha[randomNumber];\n                mwName += alpha[randomNumber];\n                payload.forEach(element => {\n                    if (element != temp) {\n                        mwName = temp;\n                    }\n                });\n                tempMwName.push(mwName)\n            }\n            commit(\"setMwGroupNames\", await tempMwName);\n            router.currentRoute.path == '/' ? router.push('/home').catch(()=> {}) : ''\n        },\n\n        // search scrip list\n        async getSearchScripts({ state, commit }, payload) {\n            state.loading = true;\n            let json = {\n                exchange: [\"All\", \"CDS\", \"MCX\", \"NFO\", \"NSE\", \"BSE\"],\n                symbol: payload ? payload.toString().toUpperCase() : ''\n            };\n            await service.getSearchScrip(json).then(response => {\n                if (response.status == 200) {\n                    response.data.forEach((searchData) => {\n                        state.mwList.forEach((mwListData) => {\n                            if (mwListData[\"token\"] == searchData[\"token\"] &&  mwListData[\"Exchange\"] != \"X\") {\n                                return searchData[\"checked\"] = true;\n                            } \n                        })\n                    })\n                    commit(\"setSearchList\", response.data);\n                } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n                    errorHandling.sessionExpire();\n                }\n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { \n                state.loading = false;\n             })\n        },\n\n        // addScrip in mkWatch\n        async addScripList({ state,dispatch }, payload) {\n            state.loading = true;\n            if (state.mwList.length > 19) {\n                errorHandling.toaster('', 'info', \"Can't add more than 20 scrips.Use another tab\", 3000)\n                state.loading = false;\n                return;\n            }else{\n                await service.addNewMwScrip(payload.addDel).then(response => {\n                    if (response.status == 200 && response.data.stat == \"Ok\") {\n                        payload.data[\"checked\"] = true;\n                        dispatch('getNewMwScripList', payload.fetchMw)\n                        errorHandling.toaster('', 'success', 'Scrip added successfully', 500);\n                    } else if (response.data.message.includes('Symbol already exixts')) {\n                        errorHandling.toaster('', 'info', 'Scrip is already present in currentTab', 3000);\n                    } else if (response.data.emsg == \"Session Expired\") {\n                        errorHandling.sessionExpire();\n                    }else if(response.data.stat == \"not_Ok\" && response.data.message){\n                        errorHandling.toaster('', 'danger', response.data.message, 5000)\n                    }\n                }, (err) => {\n                    errorHandling.errLog(err)\n                }).finally(() => { \n                    state.loading = false;\n                })\n            }\n        }, \n\n        // deleteScrip in mkWatch\n        async deleteScripFromList({ state, dispatch }, payload) {\n            state.loading = true;\n            await service.deleteMwScrip(payload.addDel).then(response => {\n                if (response.status == 200 && response.data.stat == \"Ok\") {\n                    payload.data[\"checked\"] = false;\n                    dispatch('getNewMwScripList', payload.fetchMw)\n                    errorHandling.toaster('', 'info', 'Scrip deleted successfully', 500);\n                }else if (response.data.emsg == 'Not able to Retrieve MarketWatch ' || response.data.emsg == 'Not able to Retrieve MarketWatch'\n                || response.data.values[0] == \"No Market Watch\") {\n                    errorHandling.toaster('', 'danger', response.data.emsg, 500);\n                }\n                 else if (response.data.emsg == \"Session Expired\") {\n                    errorHandling.sessionExpire();\n                }else if(response.data.stat == \"not_Ok\" && response.data.message){\n                    errorHandling.toaster('', 'danger', response.data.message, 5000)\n                }\n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { \n                state.loading = false;\n            })\n        },\n\n        //securityInfo\n        async getSecurityInfo({ commit, rootGetters, state }, payload) {\n            state.loading = true;\n            let json = {\n                \"exch\": payload.ex,\n                \"symbol\": payload.token,\n                \"userId\": rootGetters['authtication/getUserId'],\n                \"userSessionID\": rootGetters['authtication/getUserSession']\n            }\n            await service.getSecurityInfoDepthInfo(json).then(\n                response => {\n                    if (response.status == 200 && response.data != \"Not_Ok\") {\n                        commit(\"setSecurityInfo\", response.data);\n                    } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n                        errorHandling.sessionExpire();\n                    }\n                },\n                err => {\n                    errorHandling.errLog(err)\n                }\n            ).finally(() => { state.loading = false; })\n        },\n\n        // get getNewPriceRange\n        async getNewPriceRange({ commit, rootGetters, state }, payload) {\n            let json = {\n                \"exch\": payload.ex.toUpperCase(),\n                \"symbol\": payload.token,\n                \"userId\": rootGetters['authtication/getUserId'],\n                \"userSessionID\": rootGetters['authtication/getUserSession']\n            }\n            await service.getPriceRange(json).then(\n                response => {\n                    if (response.data.emsg == \"Session Expired\") {\n                      errorHandling.sessionExpire();\n                    }else if (response.status == 200 && response.data != \"Not_Ok\") {\n                        commit(\"setPriceRange\", response.data);\n                    }\n                },\n                err => {\n                    errorHandling.errLog(err)\n                }).finally(() => { commit(\"setDepthLoader\", false)});\n        },\n\n        /**\n         * @author Senthil\n         * @date 02-12-2021 \n         * @method Sorting MkWatch list\n         */\n        async sortList({ state, rootGetters }) {\n            var sortArray = [];\n            var tabIndex = parseInt(localStorage.getItem(\"tabIndex\"));\n            var mwname = state.mwGroupNames[tabIndex]['maketWatchId']\n            for (let i of state.mwList) {\n                let temp =  {\n                    exch : i.ex,\n                    token : i.token,\n                    sortingOrder : state.mwList.indexOf(i)\n                }\n                sortArray.push(temp);\n            }\n            var getSortObj = {\n                mwId: mwname,\n                userId: rootGetters['authtication/getUserId'],\n                scripData :sortArray\n            };\n            await service.newSortScrip(getSortObj).then(response => {\n                if (response.data[\"stat\"] == \"Not_Ok\" && response.data[\"emsg\"] == \"Session Expired\" ) {\n                    errorHandling.sessionExpire();\n                } \n            }, (err) => {\n                errorHandling.errLog(err)\n            }).finally(() => { })\n        },\n\n        /**\n         * @author Ashwin\n         * @date 09-12-2021 \n         * @method Alert dialog Box\n         */\n        async alertDialog({state,commit }, payload) {\n            state.alertLoader = true\n            let json = {\n                exch: payload.data.ex,\n                value: payload.data.token,\n                direction: payload.alertPrice <= payload.data.ltp ? \"l\" : \"g\",\n                symbol: payload.data.token,\n            }\n            await service.secrityAlertTrade(json).then(\n                response => {\n                    state.alertLoader = false\n                    if (response.status == 200 && response.data != \"Not_Ok\") {\n                        commit('setAlertDialog',false)\n                    } else if (response.data.stat == \"Not_Ok\" && response.data.emsg == \"Session Expired\") {\n                        errorHandling.sessionExpire();\n                    }\n                },\n                err => {\n                    errorHandling.errLog(err)\n                }\n            ).finally(() => { state.loading = false; })\n        },\n\n        checkSocketStatus({state , rootGetters , dispatch}, payload){\n            if(rootGetters['wsConnection/getConnectionStatue']){\n                var tempData = {\n                    data: state.mwList,\n                    where: 'mkWatch'\n                }\n\n                dispatch(\"wsConnection/websocketSubscription\", tempData, { root: true }) \n            }\n        },\n\n        newMarketWatch({state, rootGetters, dispatch, commit}, payload){\n            service.newMwList(payload).then(resp =>{\n                if(resp.status == 200 && resp.data.stat == 'not_Ok'){\n                    dispatch('generateMwName' , payload)\n                }else if(resp.status == 200 && resp.data.stat == 'Ok' && resp.data.result  && resp.data.message == 'Success'){\n                    // dispatch('wsConnection/inValidateSession', 'initial' , { root:true })\n                    let json = {\n                        userId:payload.userId,\n                        mwId: resp.data.result[0]['maketWatchId']\n                    }\n                    commit('setMwGroupNames',resp.data.result)\n                    dispatch('getNewMwScripList' , json)\n                    router.push('/home').catch(()=> {})\n                }\n            })\n        },\n\n        generateMwName({state, rootGetters, dispatch, commit}, payload){\n            service.newGenMwName(payload).then(response =>{\n                if(response.status == 200 && response.data.stat == 'Ok' && response.data.message == 'Market Watch Created Successfully'){\n                    dispatch('newMarketWatch', payload)\n                }\n            })\n        },\n\n        getNewMwScripList({state, rootGetters, dispatch, commit}, payload){\n            service.getNewMwScrips(payload).then(resp =>{\n                if(resp.status == 200 && resp.data.stat == 'not_Ok' && resp.data.message == 'No Data'){\n                    commit('setNodata', true)\n                    commit('setMwlist' , [])\n                }else if(resp.status == 200 && resp.data.stat == 'Ok' && resp.data.message == 'Success'){\n                    commit('setNodata', false)\n                    commit('setMwlist' , resp.data.result)\n                }\n            })\n        }\n        \n    },\n    getters:{\n        getAlertDialog: state => {\n            return state.alertDialog\n        },\n        getMwList: state => {\n            return state.mwList\n        },\n        getDepthList: state => {\n            return state.priceRageData\n        },\n    }\n};\nexport default mkWatch;"]}]}